#+TITLE: Emacs configuration

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an extensible, customizable, [[https://www.gnu.org/philosophy/free-sw.html][free/libre]] text editor. It is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.

I use it through [[http://spacemacs.org/][Spacemacs]], a sophisticated and polished set-up focused on ergonomics, mnemonics and consistency.

The first thing to do is to install Spacemacs. If you don't have Babel configured, execute this block of code to enable shell commands to be executed:

#+BEGIN_SRC emacs-lisp :results silent
(org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
#+END_SRC

#+BEGIN_SRC sh :results silent
mkdir -p ~/.dotfiles/emacs
git clone https://github.com/syl20bnr/spacemacs ~/.dotfiles/emacs/.emacs.d
#+END_SRC

The ~~/.spacemacs~ file is your main starting point for configuring Spacemacs. If you donâ€™t have this file you can install a template pressing ~SPC : dotspacemacs/install RET~ in Spacemacs, where ~SPC~ is space and ~RET~ is the enter key. At any time you can press ~SPC f e d~ to edit this file.

The template comes with many variables that you can customize and use to set things like font sizes and window preferences. Once you are done editing, save the file and either press ~SPC f e R~ in the file to reload it or just restart Spacemacs.

Some parts of this file are more important than others:

#+BEGIN_SRC emacs-lisp :tangle emacs/.spacemacs :noweb yes :mkdirp yes
;; -*- mode: emacs-lisp -*-
;; vim: set filetype=lisp foldenable foldmethod=marker:
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

<<dotspacemacs-layers>>
<<dotspacemacs-init>>
<<dotspacemacs-user-init>>
<<dotspacemacs-user-config>>

;; EOF
#+END_SRC

* Layers

Configuration Layers declaration. You should not put any user code in this function besides modifying the variable values.
 
** Configuration Layers

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref configuration-layers :noweb-sep "\n"
themes-megapack
(spell-checking :variables 
    spell-checking-enable-by-default nil ;; Disable spelling by default
    spell-checking-enable-auto-dictionary t ;; Try autodetect language 
    enable-flyspell-auto-completion nil)
(org :variables 
    org-enable-reveal-js-support t)
bibtex
deft
pdf-tools
(colors :variables
    colors-enable-nyan-cat-progress-bar t)
(latex :variables 
    latex-build-command "LatexMk" 
    latex-enable-folding t)
git
python
(auto-completion :variables
    auto-completion-return-key-behavior nil
    auto-completion-tab-key-behavior nil
    auto-completion-complete-with-key-sequence "jk"
    auto-completion-private-snippets-directory "~/.snippets"
    auto-completion-enable-snippets-in-popup t
    auto-completion-complete-with-key-sequence-delay 0.1)
(ruby :variables 
    ruby-enable-enh-ruby-mode t)
helm
(syntax-checking :variables 
    syntax-checking-enable-by-default nil)
(shell :variables 
    shell-default-shell 'ansi-term 
    shell-default-term-shell "/bin/bash")
version-control
html
ess
emacs-lisp
(scheme :variables 
    geiser-active-implementations '(chicken) 
    geiser-scheme-implementation 'chicken)
#+END_SRC

** Additional Packages

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref additional-packages :noweb-sep "\n\n"
cdlatex
regex-tool
yasnippet-snippets
sed-mode
#+END_SRC

** Excluded Packages
 
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref excluded-packages :noweb-sep "\n\n"
org-present
org-projectile
org-pomodoro
toc-org
org-brain
ox-reveal
#+END_SRC

** dotspacemacs/layers

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref dotspacemacs-layers :noweb-sep "\n\n"
(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ; List of configuration layers to load. {{{1
   dotspacemacs-configuration-layers
   '(
      <<configuration-layers>>
    )
     ; 1}}}

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages 
   '(
      <<additional-packages>>
    )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages 
   '(
      <<excluded-packages>>
    )
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))
#+END_SRC

* Init

This function is called at the very startup of spacemacs initialization before layers configuration. you should not put any user code in there besides modifying the variable values.

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref dotspacemacs-init :noweb-sep "\n\n"
(defun dotspacemacs/init ()
  "Initialization function.
this function is called at the very startup of spacemacs initialization
before layers configuration.
you should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   ;dotspacemacs-default-font '("Source Code Pro"
   dotspacemacs-default-font '("Monego"
                               :size 15
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols nil
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'origami
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etcâ€¦
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil))
#+END_SRC

* User Init

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref dotspacemacs-user-init :noweb-sep "\n\n"
(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  )
#+END_SRC

* User Config

Configuration function for user code. This function is called at the very end of Spacemacs initialization after layers configuration. This is the place where most of your configurations should be done. Unless it is explicitly specified that a variable should be set before a package is loaded, you should place your code here. The function is structured as follows:

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref dotspacemacs-user-config :noweb-sep "\n\n"
(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  <<general-configuration>>

  (with-eval-after-load 'org
    <<org-mode-configuration>>
  )
  (with-eval-after-load 'org-agenda
    <<org-agenda-configuration>>
  )
)
#+END_SRC

** General configuration

This section holds configuration which are common to most major modes

*** Make tooltips appear in a pop-up window

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n\n"
(tooltip-mode t)
#+END_SRC

*** Spaceline config

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration
(use-package spaceline-config
    :config
    (spaceline-spacemacs-theme)
    (setq powerline-default-separator 'wave)
    (spaceline-compile))
#+END_SRC

*** Copy/Paste in terminal

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n\n"
(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))))

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
(spacemacs/declare-prefix "o" "user-prefix")
(spacemacs/set-leader-keys "oy" 'copy-to-clipboard)
(spacemacs/set-leader-keys "op" 'paste-from-clipboard)
#+END_SRC

*** Wiki configuration

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n\n"
(spacemacs/declare-prefix "aow" "wiki")
(spacemacs/set-leader-keys "aoww" 'deft)
(setq deft-directory "~/.wiki")
(setq deft-default-extension "org")
(setq deft-extensions '("org"))
(setq deft-recursive t)
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename nil)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
(setq deft-ignore-file-regexp "\\(?:index.org\\|sitemap.org\\)$")
(setq deft-recursive-ignore-dir-regexp "\\(?:\\.\\|\\.\\.\\|capture\\|include\\)$")
#+END_SRC

*** Visual line navigation

This code fixes visual line navigation: I got this solution [[https://github.com/syl20bnr/spacemacs/pull/1446][here]]. Make evil-mode up/down and j/k operate over screen lines instead of logical lines, both in normal and visual mode.

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n"
(global-visual-line-mode t)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
;; Make evil-mode up/down operate in screen lines instead of logical lines

(define-key evil-normal-state-map "j" 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-normal-state-map "k" 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "<up>") 'evil-previous-visual-line)
#+END_SRC

Since emacs 26 has native support to line numbering, we enable it:
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n"
(setq-default display-line-numbers-type 'visual
              display-line-numbers-current-absolute t
              display-line-numbers-width 4
              display-line-numbers-widen t)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

*** Misc

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n\n"
(defun vct/quick-calc ()
  "Quickly compute mathematical expression and return the result within current buffer."
  (interactive "p")
  (let ((expr (read-from-minibuffer "Calc: ")))
    (insert (calc-eval expr))))

(use-package evil-ex
  :config
  (evil-ex-define-cmd "W[rite]" 'save-buffer)
  (evil-ex-define-cmd "Wq" 'evil-save-and-close)
  (evil-ex-define-cmd "wQ" 'evil-save-and-close)
  (evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+END_SRC

*** Completion
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref general-configuration :noweb-sep "\n\n"
(with-eval-after-load 'company
    (define-key company-active-map (kbd "M-j") 'company-select-next)
    (define-key company-active-map (kbd "M-k") 'company-select-previous)
    (define-key company-active-map (kbd "C-p") 'company-yasnippet-or-completion)
    (define-key company-search-map (kbd "M-j") 'company-select-next)
    (define-key company-search-map (kbd "M-k") 'company-select-previous))
#+END_SRC
** Org mode configuration

Org configuration is the largest part of my spacemacs configuration (Probably because I use emacs mainly because of it!). It is structured like this:

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref org-mode-configuration :noweb-sep "\n\n"
<<org-babel-configuration>>
<<easy-templates>>
<<timestamp-configuration>>
<<latex-fragment-numbering>>
<<automatic-fragment-preview>>
<<quick-insert-latex-environments>>
<<latex-code-syntax-highlight>>
<<capture-templates>>
<<misc>>
#+END_SRC

*** Misc

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref misc :noweb-sep "\n"
;; Fix width of inline images 
(setq org-image-actual-width 400)

(setq org-cycle-emulate-tab 'white)
(setq org-tags-column 0)

;(custom-set-faces '(org-tag ((t (:background "orange" :foreground "black" :box t)))))

(defun my/org-mode-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5))
    (set-face-attribute face nil :weight 'normal :height 1.0)))

(add-hook 'org-mode-hook 'my/org-mode-hook)
    
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

*** Babel configuration

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref org-babel-configuration :noweb-sep "\n"
(setq org-src-preserve-indentation t)

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (lisp . t)
    (python . t)
    (gnuplot . t)
    (R . t)
    (ruby . t)
    (C . t)
    (makefile . t)
    (shell . t)
    (sql . t)))
#+END_SRC

*** Easy templates

With just a few keystrokes, [[https://orgmode.org/manual/Easy-templates.html][Orgâ€™s easy templates]] inserts empty pairs of structural elements, such as ~#+BEGIN_SRC~ and ~#+END_SRC~. Easy templates use an expansion mechanism, which is native to Org, in a process similar to yasnippet and other Emacs template expansion packages. 

However, [[https://orgmode.org/Changes.html#org1b5e967][Org Mode 9.2 changed the mechanism of template expansion]], where org-structure-template-alist is only for blocks defined by ~#+BEGIN_~ and ~#+END_~ and entries like ~("p" ":PROPERTIES:?:END:")~ are no longer accepted.

To activate the old behaviour we must use the ~org-tempo~ library:

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref easy-templates :noweb-sep "\n\n"
(require 'org-tempo)
#+END_SRC

Then we can define the templates.

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref easy-templates :noweb-sep "\n\n"
(tempo-define-template "vct-r-src-block" '("#+BEGIN_SRC R :session :results output\n" p "\n#+END_SRC" >) "<r" "Insert a R source code block")
#+END_SRC

*** Timestamp configuration

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref timestamp-configuration :noweb-sep "\n\n"
(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%Y-%m-%d %a %H:%M>" . "<%Y-%m-%d %a %H:%M>"))

; Automatic update of time-stamps
(setq time-stamp-active t)
(setq time-stamp-format "<%:y-%02m-%02d %3a %02H:%02M>")
(setq time-stamp-pattern "10/^#\\+MODIFIED: %%$")
(add-hook 'before-save-hook 'time-stamp) ; Update timestamp on saving
#+END_SRC

*** LaTeX equation numbering
**** Fix numbering in LaTeX fragment preview
In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. However, each fragment is created in isolation, meaning that numbering is almost always wrong, and typically with each numbered equation starting with =(1)=. This hack, stolen from [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][John Kitchin]], solves this in a nice way for my purposes.

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref latex-fragment-numbering :noweb-sep "\n\n"
(defun org-renumber-environment (orig-func &rest args)
      "Improve equation numbering"
      (let ((results '())
            (counter -1)
            (numberp))
        (setq results (loop for (begin .  env) in
                            (org-element-map (org-element-parse-buffer) 'latex-environment
                              (lambda (env)
                                (cons
                                 (org-element-property :begin env)
                                 (org-element-property :value env))))
                            collect
                            (cond
                             ((and (string-match "\\\\begin{equation}" env)
                                   (not (string-match "\\\\tag{" env)))
                              (incf counter)
                              (cons begin counter))
                             ((string-match "\\\\begin{align}" env)
                              (prog2
                                  (incf counter)
                                  (cons begin counter)
                                (with-temp-buffer
                                  (insert env)
                                  (goto-char (point-min))
                                  ;; \\ is used for a new line. Each one leads to a number
                                  (incf counter (count-matches "\\\\$"))
                                  ;; unless there are nonumbers.
                                  (goto-char (point-min))
                                  (decf counter (count-matches "\\nonumber")))))
                             (t
                              (cons begin nil)))))
        (when (setq numberp (cdr (assoc (point) results)))
          (setf (car args)
                (concat
                 (format "\\setcounter{equation}{%s}\n" numberp)
                 (car args)))))
      (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)

(setq org-latex-prefer-user-labels t)
#+END_SRC

**** Automatic LaTeX fragment previewing toggle

This solution (found [[http://slumpy.org/blog/2017-02-01-automatic-latex-preview-in-org-mode/][here]]) enables org-mode LaTeX preview images when the cursor is over the equation.

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref automatic-fragment-preview :noweb-sep "\n\n"
(defvar kk/org-latex-fragment-last nil
    "Holds last fragment/environment you were on.")

  (defun kk/org-in-latex-fragment-p ()
    "Return the point where the latex fragment begins, if inside
  a latex fragment. Else return false"
    (let* ((el (org-element-context))
           (el-type (car el)))
      (and (or (eq 'latex-fragment el-type) (eq 'latex-environment el-type))
          (org-element-property :begin el))))

  (defun kk/org-latex-fragment-toggle ()
    "Toggle a latex fragment image "
    (and (eq 'org-mode major-mode)
	 (let ((begin (kk/org-in-latex-fragment-p)))
           (cond
            ;; were on a fragment and now on a new fragment
            ((and
              ;; fragment we were on
              kk/org-latex-fragment-last
              ;; and are on a fragment now
              begin

              ;; but not on the last one this is a little tricky. as you edit the
              ;; fragment, it is not equal to the last one. We use the begin
              ;; property which is less likely to change for the comparison.
              (not (and kk/org-latex-fragment-last
			(= begin
			   kk/org-latex-fragment-last))))
             ;; go back to last one and put image back, provided there is still a fragment there
             (save-excursion
               (goto-char kk/org-latex-fragment-last)
               (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment))

               ;; now remove current image
               (goto-char begin)
               (let ((ov (loop for ov in (org--list-latex-overlays)
                               if
                               (and
				(<= (overlay-start ov) (point))
				(>= (overlay-end ov) (point)))
                               return ov)))
		 (when ov
                   (delete-overlay ov)))
               ;; and save new fragment
               (setq kk/org-latex-fragment-last begin)))

            ;; were on a fragment and now are not on a fragment
            ((and
              ;; not on a fragment now
              (not begin)
              ;; but we were on one
              kk/org-latex-fragment-last)
             ;; put image back on, provided that there is still a fragment here.
             (save-excursion
               (goto-char kk/org-latex-fragment-last)
               (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment)))

             ;; unset last fragment
             (setq kk/org-latex-fragment-last nil))

            ;; were not on a fragment, and now are
            ((and
              ;; we were not one one
              (not kk/org-latex-fragment-last)
              ;; but now we are
              begin)
             ;; remove image
             (save-excursion
               (goto-char begin)
               (let ((ov (loop for ov in (org--list-latex-overlays)
                               if
                               (and
				(<= (overlay-start ov) (point))
				(>= (overlay-end ov) (point)))
                               return ov)))
		 (when ov
                   (delete-overlay ov))))
             (setq kk/org-latex-fragment-last begin))))))

(add-hook 'post-command-hook 'kk/org-latex-fragment-toggle t)
#+END_SRC
*** Quick insertion of LaTeX environment

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref quick-insert-latex-environments :noweb-sep "\n\n"
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

(define-key evil-normal-state-map (kbd ", e q") 'org-ref-helm-insert-ref-link)
(setq cdlatex-math-symbol-alist '((?m ("\\mu" "\\mathrm{?}"))))
(setq cdlatex-env-alist '(
   ("eqn" "\\begin{equation}\n?\n\\end{equation}" nil)  ;; Numbered equation
   ("eqnn" "\\begin{equation*}\n?\n\\end{equation*}" nil) ;; Non-numbered equation
   ("alg" "\\begin{align}\n?\n\\end{align}" nil)
   ("algn" "\\begin{align*}\n?\n\\end{align*}" nil)))
(setq cdlatex-command-alist '(
    ("equation" "Insert non-labeled equation" "" cdlatex-environment ("eqn") t nil)
    ("equation*" "Insert non-labeled equation" "" cdlatex-environment ("eqnn") t nil)
    ("align" "Insert non-labeled align" "" cdlatex-environment ("alg") t nil)
    ("align*" "Insert non-labeled align" "" cdlatex-environment ("algn") t nil)))
#+END_SRC

*** LaTeX code syntax highlighting

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref latex-code-syntax-highlight :noweb-sep "\n\n"
(setq org-highlight-latex-and-related '(latex script entities))

(font-lock-add-keywords 'org-mode
        '(("\\(\\\\begin\\|\\\\end\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)" (1 'font-lock-keyword-face) (2 'font-lock-function-name-face))
          ("\\(\\\\eqref\\|\\\\ref\\|\\\\href\\|\\\\label\\|\\\\ref\\|\\\\cite\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)" (1 'font-lock-keyword-face) (2 'font-lock-constant-face))
          ("\\(\\\\textrm\\|\\\\frac\\|\\\\mathrm\\)" (1 'font-lock-keyword-face))))
#+END_SRC

*** Capture templates

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref capture-templates :noweb-sep "\n\n"
(setq org-capture-templates
      (quote (("t" "Todo" entry (file+headline "~/.wiki/capture/todos.org" "Tasks")
               "* TODO %^{Task}%?\n%U\n" :clock-in t :clock-resume t)
              ("p" "Project" entry (file+headline "~/.wiki/capture/projects.org" "Projects")
               "* TODO %^{Project} :PROJECT:\n%U\n%a\n%?" :clock-in t :clock-resume t)
              ("n" "Note" entry (file+headline "~/.wiki/capture/notes.org" "Notes")
               "* %^{Note} :NOTE:\n%U\n%a\n%?" :clock-in t :clock-resume t)
              ("i" "Idea" entry (file+headline "~/.wiki/capture/notes.org")
               "* %^{Idea} :IDEA: \n%u\n%?" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/.wiki/capture/journal.org")
               "* %^{Heading}\n%U\n%?" :clock-in t :clock-resume t))))
#+END_SRC

** Org agenda configuration

#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref org-agenda-configuration :noweb-sep "\n\n"
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-agenda-files '("~/.wiki/capture/"))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))))))
        ("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))))

(setq org-archive-location "~/.wiki/capture/archive.org::")

;; TODO: Used to indicate tasks and projects which need to be done
;; STARTED: Used to indicate that a task or project is already started
;; WAITING: Whenever I have a task that is waiting on someone else, I'll assign it this keyword 
;; INACTIVE: signify that I'd like to come back to it eventually and I'll occasionally search my files for "INACTIVE" projects when I have time.
(setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|"  "WAITING(w)" "INACTIVE(l)" "CANCELED(c)" "DONE(d)")))

(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "GoldenRod" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold)) 
        ("INACTIVE" . (:foreground "LimeGreen" :weight bold))
        ("CANCELED" . (:foreground "LimeGreen" :weight bold))))

(setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
(setq org-outline-path-complete-in-steps nil) ; Refile in a single go
(setq org-refile-use-outline-path t)          ; Show full paths for refiling
#+END_SRC
