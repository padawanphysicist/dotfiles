#!/usr/bin/env bash
# -*- mode: bash -*-
#
# bootstrap files to its places.
#
# The script assumes you have emacs and org-mode installed
#

# Tells the shell script to exit if it encounters an error
set -e

SCRIPT_NAME="$0"
DOTFILES_ROOT=$(pwd -P)
MAX_DEPTH=3

# Default actions
INSTALL="false"
UPDATE="false"
UPGRADE="false"
OVERWRITE="false"
SKIP="true"
RULE=""


function clean {
    local RULE_NAME=$1
    case ${RULE_NAME} in
        bash)
            rm -frv ${HOME}/.inputrc
            rm -frv ${HOME}/.bashrc*
            rm -frv ${HOME}/.dircolors-solarized
            ;;
        vim)
            rm -frv ${HOME}/.vim*
            rm -frv ${HOME}/.spf13-vim-3
            ;;
        emacs)
            rm -frv ${HOME}/.emacs.d
            rm -frv ${HOME}/.spacemacs
            ;;
        tmux)
            rm -frv ${HOME}/.tmux.conf
            ;;
        *)
        ;;
    esac
}

# Use -gt 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use -gt 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to -gt 0 the /etc/hosts part is not recognized ( may be a bug )
while [[ $# -gt 1 ]]
do
key="$1"
case $key in
    -i|--install)
        RULE="$2"
        INSTALL="true"
        UPDATE="false"
        UPGRADE="false"
        OVERWRITE="true"
        SKIP="false"
        shift # past argument
        ;;
    -u|--update)
        RULE="$2"
        INSTALL="false"
        UPDATE="true"
        UPGRADE="false"
        OVERWRITE="false"
        SKIP="false"
        shift # past argument
        ;;
    -U|--upgrade)
        RULE="$2"
        INSTALL="false"
        UPDATE="false"
        UPGRADE="true"
        OVERWRITE="false"
        SKIP="false"
        shift # past argument
        ;;
    -C|--clean)
        RULE="$2"
        clean ${RULE}
        exit
        shift
        ;;
    --default)
        DEFAULT=YES
        ;;
    *)
        # unknown option
        printf ""
        ;;
    esac
    shift # past argument or value
done

if [[ -n $1 ]]; then
    echo "Last line of file specified as non-opt/last argument:"
    tail -1 $1
fi

function tangle {
    local RULE_NAME=$1
    local ORG_FILE="${RULE_NAME}.org"
    if [ -f ${ORG_FILE} ]; then
        ./org-tangle ${ORG_FILE} 2>&1 | grep Tangled
    else
        printf "Warning. File does not exists. ${ORG_FILE}\n"
    fi
}

function setup {
    local RULE_NAME=$1
    # Installing dependencies
    if [ ${INSTALL} == "true" ]; then
        case ${RULE_NAME} in
            bash)
                if [ ! -d "${HOME}/.dircolors-solarized" ]; then
                    printf "Installing dircolors-solarized...\n"
                    git clone "https://github.com/seebi/dircolors-solarized" "${HOME}/.dircolors-solarized"
                else
                    printf "${HOME}/.dircolors-solarized exists."
                fi
                ;;
            emacs)
                if [ ! -d "${HOME}/.emacs.d" ]; then
                    printf "Installing spacemacs...\n"
                    git clone "https://github.com/syl20bnr/spacemacs" "${HOME}/.emacs.d"
                else
                    printf "${HOME}/.emacs.d exists."
                    exit 1
                fi
                ;;
            vim)
                if [ ! -d "${HOME}/.spf13-vim-3" ]; then
                    printf "Installing spf3-vim...\n"
                    curl "http://j.mp/spf13-vim3" -L -o - | sh
                else
                    printf "spf13-vim exists."
                fi
                ;;
            *)
                printf ""
                ;;
        esac
    elif [ ${UPGRADE} == "true" ]; then
        printf ""
    else
        printf ""
    fi
}

function symlink {
    local RULE_NAME=$1
    case ${RULE_NAME} in
        bash)
            printf "Symlinking "
            ln -sfv ${DOTFILES_ROOT}/bash/bashrc ${HOME}/.bashrc
            ln -sfv ${DOTFILES_ROOT}/bash/inputrc ${HOME}/.inputrc
            ;;
        emacs)
            printf "Symlinking "
            ln -sfv ${DOTFILES_ROOT}/emacs/spacemacsrc ${HOME}/.spacemacs
            ;;
        vim)
            printf "Symlinking "
            ln -sfv "${DOTFILES_ROOT}/vim/vimrc.bundles.local" "${HOME}/.vimrc.bundles.local"
            ln -sfv "${DOTFILES_ROOT}/vim/vimrc.local" "${HOME}/.vimrc.local"
            printf ""
            ;;
        tmux)
            printf "Symlinking "
            ln -sfv ${DOTFILES_ROOT}/tmux/tmux.conf ${HOME}/.tmux.conf
            ;;
        git)
            printf "Symlinking "
            ln -sfv ${DOTFILES_ROOT}/git/gitconfig ${HOME}/.gitconfig
            ;;

        *)
            printf ""
            ;;
    esac
}

function postprocess {
    local RULE_NAME=$1
    case ${RULE_NAME} in
        bash)
            printf "Running bash-it.\n"
            echo "y" | ${HOME}/.bash_it/install.sh
            ;;
        emacs)
            printf "Opening emacs for installing remaining packages. Close when done.\n"
            emacs&
            ;;
        vim)
            echo "vim +BundleInstall! +BundleClean +qa" | sh
            reset
            ;;
        *)
            printf ""
            ;;
    esac
}

function bootstrap {
    local RULE_NAME=$1
    setup ${RULE_NAME}
    if [[ "${UPGRADE}" == "false" && "${SKIP}" == "false" ]]; then # Tangle only for 'install' and 'update'
        tangle ${RULE_NAME}
    fi
    symlink ${RULE_NAME}
    if [[ "${INSTALL}" == "true" ]]; then # Postprocess only for installing process
        postprocess ${RULE_NAME}
    fi
}

if [ ${RULE} == "all" ]; then
    for RULE_NAME in bash vim emacs tmux git; do
        bootstrap ${RULE_NAME}
    done
else
    bootstrap ${RULE}
fi

# vim: set ft=sh :
