#! /usr/bin/guile \
-e main -s
!#
(use-modules
 (ice-9 textual-ports)
 (ice-9 regex)
 (ice-9 getopt-long))

(define (f/read path)
  ;; Return contents of PATH as a string
  (let ((abs-path (canonicalize-path path)))
    (call-with-input-file abs-path
      get-string-all)))

(define (f/has-line? line path)
  ;; Check whether a line of FILE contains a LINE
  (let ((file-contents (f/read path)))
    (regexp-exec (make-regexp (format #f "^~a" (regexp-quote line)) regexp/newline) file-contents)))

(define (f/prepend line path)
  ;; Prepend LINE to PATH
  (let ((old-contents (f/read path)))
    (call-with-output-file path
      (lambda (port)
	(format port "~a\n~a" line old-contents)))))

(define (f/append line path)
  ;; Prepend LINE to PATH
  (let ((old-contents (f/read path)))
    (call-with-output-file path
      (lambda (port)
	(format port "~a\n~a" old-contents line)))))

(define (f/remove-line line path)
  ;; Remove LINE from PATH
  (let* ((old-contents (f/read path)))
    (call-with-output-file path
      (lambda (port)
	(regexp-substitute/global port (format #f "~a" (regexp-quote line)) old-contents 'pre "" 'post)))))

(define (org/tangle path)
  (system (format #f "emacs -q --batch -l org --eval '(org-babel-tangle-file ~s)'" path)))

(define (stow rule)
  ;;(system (format #f "stow --verbose --restow ~a" rule))
  (system (format #f "stow --verbose ~a" rule))
  )

(define (unstow rule)
  (system (format #f "stow --delete ~a" rule)))

(define (touch path)
  (system (format #f "touch ~a" path)))

(define (home file)
  (format #f "~a/~a" (getenv "HOME") file))

(define (help _)
  (format #t "\
Bootstrap configuration for a program

Usage: ./bootstrap [-h | -i [PROGRAM] | -t [PROGRAM]]
  -h, --help                Show this message
  -i, --install [PROGRAM]   Install PROGRAM configuration
  -t, --tangle  [PROGRAM]   Only tangle configuration files for PROGRAM\n")
  #t)

(define (install prog)
  (format #t "Installing configuration for ~a\n" prog)
  (tangle prog)
   (cond
   ((string= prog "xterm")
    (let ((xresources (home ".Xresources"))
	  (line "#include \".Xresources.d/xterm\""))
      (unless (file-exists? xresources)
	(touch xresources))
      (unless (f/has-line? line xresources)
	(f/prepend line xresources))
      (system (format #f "xrdb -load ~a" xresources))))
   ((string= prog "bash")
    (let ((bash-profile (home ".bash_profile"))
	  (bashrc (home ".bashrc"))
	  (lines '("if [ -f \"$HOME/.bashrc\" ] && [ -r \"$HOME/.bashrc\" ]; then source \"${HOME}/.bashrc\"; fi")))
      (when (file-exists? bashrc)
	  (rename-file bashrc (string-join `(,bashrc ".backup") "")))
      (unless (file-exists? bash-profile)
	(touch bash-profile))
      (for-each (lambda (line)
		  (unless (f/has-line? line bash-profile)
		    (f/append line bash-profile)))
		lines))))
   (stow prog)
   (stow "assets")
  #t)

(define (remove prog)
  (format #t "Removing configuration for ~a\n" prog)
  (unstow prog)
  (system (format #f "rm --recursive --verbose --force ~a" prog))
  (cond
   ((string= prog "xterm")
    (let ((xresources (home ".Xresources"))
	  (line "#include \".Xresources.d/xterm\""))
      (when (f/has-line? line xresources)
	(f/remove-line line xresources)
	(system (format #f "xrdb -load ~a" xresources)))))
   ((string= prog "bash")
    (let ((bash-profile (home ".bash_profile"))
	  (lines '("if [ -f \"$HOME/.bashrc\" ] && [ -r \"$HOME/.bashrc\" ]; then source \"${HOME}/.bashrc\"; fi")))
      (for-each (lambda (line)
		  (when (f/has-line? line bash-profile)
		    (f/remove-line line bash-profile)))
		lines)
      (system (format #f "source ~a" bash-profile)))))
  #t)

(define (tangle prog)
  (let ((org-file (format #f "~a.org" prog)))
    (if (file-exists? org-file)
	(begin
	  (format #t "Tangling configuration file for ~a...\n" prog)
	  (org/tangle org-file))
	(begin
	  (format #t "Error: there is no configuration for ~a\n" prog)
	  (exit 1)))
    )
  #t)

(define option-spec
  `((install (single-char #\i)
	     (value #t)
	     (predicate ,install))
    (remove (single-char #\r)
	     (value #t)
	     (predicate ,remove))
    (tangle  (single-char #\t)
	     (value #t)
	     (predicate ,tangle))
    (help (single-char #\h)
	  (value #f)
	  (predicate ,help))))

(define (main args)
  (define options (getopt-long args option-spec))
  (newline))

 


