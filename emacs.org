#+TITLE: Emacs configuration

** =.spacemacs=
*** Configuration layers

Example of useful layers you may want to use right away. Uncomment some layer names and press =<SPC f e R>= (Vim style) or =<M-m f e R>= (Emacs style) to install them.

#+NAME: dotspacemacs-configuration-layers
#+BEGIN_SRC emacs-lisp
helm
(auto-completion :variables auto-completion-private-snippets-directory "~/.snippets")
better-defaults
(c-c++ :variables c-c++-default-mode-for-headers 'c++-mode)
(colors :variables colors-colorize-identifiers 'all)
emacs-lisp
deft
git
haskell
html
latex
markdown
(org :variables org-enable-reveal-js-support t)
pdf-tools
(python :variables python-sort-imports-on-save t)
(spell-checking :variables spell-checking-enable-auto-dictionary t)
syntax-checking
version-control
#+END_SRC

*** Additional packages

List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages, then consider creating a layer. You can also put the configuration in `dotspacemacs/user-config'.

#+NAME: dotspacemacs-additional-packages
#+BEGIN_SRC emacs-lisp
cdlatex
spaceline
deft
#+END_SRC

*** Frozen packages

A list of packages that cannot be updated.

#+NAME: dotspacemacs-frozen-packages
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Excluded packages

A list of packages that will not be installed and loaded.

#+NAME: dotspacemacs-excluded-packages
#+BEGIN_SRC emacs-lisp
org-bullets
#+END_SRC

*** User init

Initialization function for user code. It is called immediately after `dotspacemacs/init', before layer configuration executes.

This function is mostly useful for variables that need to be set before packages are loaded. If you are unsure, you should try in setting them in `dotspacemacs/user-config' first.

#+NAME: dotspacemacs-user-init
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** User config

Configuration function for user code. This function is called at the very end of Spacemacs initialization after layers configuration.

This is the place where most of your configurations should be done. Unless it is explicitly specified that a variable should be set before a package is loaded, you should place your code here.

**** General configuration

This section contains configuration which is not related to any specific major mode.

***** User-defined elisp directory

Add custom user elisp code directory to emacs' =PATH=

****** Define here the directory

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(setq custom-elisp "~/.elisp/")
#+END_SRC

****** Add subdirectories to =PATH=

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path custom-elisp)

(let ((default-directory custom-elisp))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

***** Timestamp

Sometimes it's nice to have a timestamp in your files

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(setq
  time-stamp-active t
  time-stamp-time-zone "UTC"
  time-stamp-format "%:y%02m%02d%02H%02M%02S"
  time-stamp-pattern "10/MODIFIED: %%$")
(add-hook 'before-save-hook 'time-stamp) ; update when saving
#+END_SRC

***** Abbreviations

Nice abbreviations for people like me who forget sometimes and keep pressing Shift key while typing.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(eval-after-load 'evil-ex '(evil-ex-define-cmd "W[rite]" 'save-buffer))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "Wq" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "wQ" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+END_SRC

***** Heartbeat cursor

I really liked [[http://stackoverflow.com/questions/13625080/looking-forward-a-way-to-make-cursor-blinks-like-a-heartbeat-in-emacs][this]] when I found it, then I took the code as a library, so I could customize it.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(use-package heartbeat-cursor)
(heartbeat-cursor-mode)
#+END_SRC

***** Powerline

The default old spacemacs modeline was moved to a separate project, [[https://github.com/TheBB/spaceline][spaceline]], and therefore you must include it separately:

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-spacemacs-theme)
(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
(setq powerline-default-separator 'wave)
(spaceline-compile)
#+END_SRC

***** Enable visual line mode

Enable visual line mode for org-modes only.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

***** Fringe indicators

Fringe indicators for visual line mode

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators
    '(left-curly-arrow right-curly-arrow))
#+END_SRC

***** Navigation

Fixing visual lines navigation: I got this solution [[https://github.com/syl20bnr/spacemacs/pull/1446][here]]. Make evil-mode up/down operate in screen lines instead of logical lines, both in normal state and visual mode.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "j" 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<down>" ) 'evil-next-visual-line)
(define-key evil-normal-state-map "k" 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<up>" ) 'evil-previous-visual-line)
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map (kbd "<down>" ) 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)
(define-key evil-visual-state-map (kbd "<up>" ) 'evil-previous-visual-line)
#+END_SRC

***** Copy/Paste in terminal

Enable clipboard in emacs when running in terminal, as a client.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))))

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
(spacemacs/set-leader-keys "oy" 'copy-to-clipboard)
(spacemacs/set-leader-keys "op" 'paste-from-clipboard)
#+END_SRC

**** Python configuration

Python programming setup.

***** Coconut mode

[[http://coconut-lang.org/][Coconut]] is functional programming language that compiles to Python. Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python.

#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(use-package coconut-mode)
#+END_SRC

**** Org-mode configuration

[[http://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

Its configuration comprises most of my emacs configuration (Since it is the main reason I use Emacs actually); therefore it is sane to keep it structured in different sections.

***** Load packages

We load the necessary packages for the proper functioning of org-mode.

#+NAME: org-packages
#+BEGIN_SRC emacs-lisp
(require 'ox)       ;; Export backends
(require 'ox-latex) ;; LaTeX export backend
(require 'ob)       ;; Babel
#+END_SRC

***** General configuration
****** Adjust size of figures in buffer

Fix the size for images shown in buffer, to avoid too large pictures.

This set the size to a third of the window width.

#+NAME: org-general
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width (/ (display-pixel-width) 3))
#+END_SRC

****** Font settings for tags

Usually tags are shown with the same color as the header, which turn them
hard to spot.

#+NAME: org-general
#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-tag ((t (:foreground "DarkOrange3" :background "gray13" :box t :height 100)))))
#+END_SRC

****** Clean view
******* Enable visual line mode

#+NAME: org-general
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

******* Indentation

Org's default outline with stars and no indents can become too cluttered for short documents. For book-like long documents, the effect is not as noticeable. Org provides an alternate indentation scheme: it uses only one star and indents text to line with the heading.

#+NAME: org-general
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-indent-mode t)) t)
#+END_SRC

***** Babel

[[http://orgmode.org/worg/org-contrib/babel/][Babel]] is Org-mode's ability to execute source code within Org-mode documents.

Through extending Org-mode with several features for editing exporting and executing source code Babel turns Org-mode into a tool for both /Literate Programming/ and /Reproducible Research/.

#+NAME: org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '(
  (C . t)
  (emacs-lisp . t)
  (fortran . t)
  (gnuplot . t)
  (haskell . t)
  (python . t)
  (sed . t)
  (sh . t)))
#+END_SRC

***** LaTeX configuration

This section take care of LaTeX formatting/previewing in org-mode.

****** Fragment preview folder location

By default, org-mode keeps image files of the formula previews in a subdirectory called `ltxpng' in the directory where the org file resides.

I find this annoying, and I like to keep them in the =/tmp= folder, which is wiped after reboot

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq org-latex-preview-ltxpng-directory "/tmp/")
#+END_SRC

****** Fragment preview size

I find the default preview size of org-mode too small.

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
#+END_SRC

****** Syntax highlighting

Unfortunately org-mode does not highlight LaTeX syntax nicely, so I have to handle by hand

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
  '(("\\(\\\\begin\\|\\\\end\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
     (1 'font-lock-keyword-face)
     (2 'font-lock-function-name-face))
    ("\\(\\\\eqref\\|\\\\ref\\|\\\\href\\|\\\\label\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
     (1 'font-lock-keyword-face)
     (2 'font-lock-constant-face))
    ("\\(\\\\textrm\\|\\\\frac\\|\\\\mathrm\\)"
     (1 'font-lock-keyword-face))
))
#+END_SRC

****** Quick insertion of LaTeX environments

Speedup insertion of LaTeX environments with [[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][CDLaTeX]]:

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+END_SRC

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq cdlatex-env-alist '(
  ("vct-eqn" "\\begin{equation}\n?\n\\end{equation}\n" nil)
  ("vct-alg" "\\begin{align}\n?\n\\end{align}\n" nil)
  ("vct-pmatrix" "\\begin{pmatrix}\n?\n\\end{pmatrix}\n" nil)
  ("vct-bmatrix" "\\begin{bmatrix}\n?\n\\end{bmatrix}\n" nil)))
(setq cdlatex-command-alist '(
  ("equation" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
  ("equat" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
  ("align" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
  ("alig" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
  ("pmatrix" "Insert pmatrix environment" "" cdlatex-environment ("vct-pmatrix") t nil)
  ("bmatrix" "Insert bmatrix environment" "" cdlatex-environment ("vct-bmatrix") t nil)))
#+END_SRC

****** PDF exporting

Uses latexmk for exporting

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process '("latexmk -pdf %f"))
#+END_SRC

****** Custom export classes

For this we need to load some libraries first

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(require 'ox)
(require 'ox-extra)
(require 'ox-latex)

;; Sections tagged with 'ignore' are... ignored.
(ox-extras-activate '(ignore-headlines))
#+END_SRC

******* org-report

Class for reports (uses abntex2)

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq org-export-latex-listings t)
(add-to-list 'org-latex-classes
          '("org-report"
             "\\documentclass{abntex2}
             [DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

******* org-preprint

This is a custom class for general-purpose LaTeX exporting.

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
(setq org-export-latex-listings t)
(add-to-list 'org-latex-classes
          '("org-preprint"
             "\\documentclass{preprint}
             [DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

***** Source code structure

#+NAME: org-mode-settings
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  ;;===========================================================================80
  ;; Package including
  ;;===========================================================================80
  <<org-packages>>

  ;;===========================================================================80
  ;; General configuration
  ;;===========================================================================80
  <<org-general>>

  ;;===========================================================================80
  ;; Org babel
  ;;===========================================================================80
  <<org-babel>>

  ;;===========================================================================80
  ;; LaTeX configuration
  ;;===========================================================================80
  <<org-latex>>
  )
#+END_SRC

**** Annotations configuration
***** Deft

[[jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by [[notational.net][Notational Velocity]]. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.

#+NAME: annotations-deft
#+BEGIN_SRC emacs-lisp
(require 'deft)

(setq deft-default-extension "org")
(setq deft-extensions '("org"))
(setq deft-directory "~/1.Working/Wiki")
(setq deft-recursive t)
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
#+END_SRC

***** Org-Wiki

[[https://github.com/caiorss/org-wiki][Org Wiki]] is an org mode extension that provides tools to manage and build a desktop wiki.

#+NAME: org-wiki
#+BEGIN_SRC emacs-lisp
;; Load package
(use-package org-wiki)

;; Set root folder of the Wiki
(setq org-wiki-location "~/1.Working/Wiki/")
#+END_SRC

For pasting images in emacs. Requires [[https://github.com/caiorss/clip.jar][Clip.jar]].
#+NAME: org-wiki
#+BEGIN_SRC emacs-lisp
;; Set folder of Clip.jar
(setq org-wiki-clip-jar-path "~/.bin/Clip.jar")
#+END_SRC
***** Structure

#+NAME: annotations-settings
#+BEGIN_SRC emacs-lisp
<<annotations-deft>>
<<org-wiki>>
#+END_SRC

**** Source code structure

Since the user configuration can grow quite a lot, I think it's better to
keep it organized on its own structure.

#+NAME: dotspacemacs-user-config
#+BEGIN_SRC emacs-lisp
<<general-configuration>>
<<python-settings>>
<<org-mode-settings>>
<<annotations-settings>>
#+END_SRC

*** Source code structure

This is the only section which might have major rewritings, since it is based on the default file generated by spacemacs, and may change across different versions.

#+BEGIN_SRC emacs-lisp :noweb tangle :tangle emacs/.spacemacs
;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     <<dotspacemacs-configuration-layers>>
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     <<dotspacemacs-additional-packages>>
   )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages
   '(
     <<dotspacemacs-frozen-packages>>
   )
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages
   '(
     <<dotspacemacs-excluded-packages>>
   )
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Inconsolata"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  <<dotspacemacs-user-init>>
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  <<dotspacemacs-user-config>>
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
#+END_SRC

# vim:set nowrap:
** Snippets
:PROPERTIES:
:MKDIRP: yes
:END:
*** mu4e-compose-mode
**** Informal mail in portuguese

#+BEGIN_SRC emacs-lisp :noweb tangle :tangle emacs/.snippets/mu4e-compose-mode/portugues
#key: portugues
#name: Modelo de e-mail simples, informal, em português
#contributor: Victor Santos <victor_santos@fisica.ufc.br>
# --
#+OPTIONS: toc:nil ^:nil

att,
Victor.
#+END_SRC

**** Informal mail in english

#+BEGIN_SRC emacs-lisp :noweb tangle :tangle emacs/.snippets/mu4e-compose-mode/english
#key: english
#name: Template for simple, informal email in english
#contributor: Victor Santos <victor_santos@fisica.ufc.br>
# --
#+OPTIONS: toc:nil ^:nil

Cheers,
Victor.
#+END_SRC
