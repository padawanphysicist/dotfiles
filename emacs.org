#+title: Emacs configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes
#+PROPERTY: header-args+ :padline no
#+property: header-args+ :results silent

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an extensible, customizable, [[https://www.gnu.org/philosophy/free-sw.html][free/libre]] text editor. It is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.

Why lexical scope? https://nullprogram.com/blog/2016/12/22/

This section contains the configuration to be used for pure Emacs (no starter kits).

* Early init file
:properties:
:header-args+: :tangle "emacs/.emacs.d/early-init.el"
:header-args+: :shebang ";; -*- mode: emacs-lisp; lexical-binding: t; -*-"
:end:

Emacs 27+ introduces =early-init.el=, which is run before =init.el=, before package and UI initialization happens. Therefore we can customize in it variables that affect frame appearance as well as the package initialization process.

** Improve garbage collection

The [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][garbage collection]] in Emacs is very simple. You allocate some bytes and once you pass a certain threshold, it garbage collects.

It turns out that the default behavior is to garbage collect very often. And because there is so little garbage to collect each time, you will not notice any lag. The problem is when you use memory-intensive features like =helm= on a large collection. The solution is mentioned in the manual:

#+begin_example
The initial threshold value is GC_DEFAULT_THRESHOLD, defined in alloc.c. Since it's defined in word_size units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one. If you specify a larger value, garbage collection will happen less often. This reduces the amount of time spent garbage collecting, but increases total memory use. You may want to do this when running a program that creates lots of Lisp data. 
#+end_example

*** Defer garbage collection further back in the startup process

The Garbage Collector eats up quite a bit of time, easily doubling startup time. The trick is to turn up the memory threshold as early as possible. This helps reduce initialization time. We also change another variable that might trigger garbage collection: =gc-cons-percentage=, whose value specifies the amount of consing before a garbage collection occurs, as a fraction of the current heap size.

#+begin_src emacs-lisp
(customize-set-variable 'gc-cons-threshold most-positive-fixnum)
(customize-set-variable 'gc-cons-percentage 0.6)
#+end_src

*** Set =gc-cons-threshold= smaller for interactive use

I first define a new threshold for triggering the collector:
#+begin_src emacs-lisp
(defvar startup/gc-cons-threshold 67108864 ; 64mb
  "The default value to use for `gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering, increase this.")
#+end_src

We also define a function to be hooked in the startup:
#+begin_src emacs-lisp
(defun startup/reset-gc ()
  (setq gc-cons-threshold startup/gc-cons-threshold
        gc-cons-percentage 0.1))
#+end_src

*** Avoid Garbage Collect When Using Minibuffer

#+begin_src emacs-lisp
(defun gc-minibuffer-setup-hook ()
  (setq gc-cons-threshold (* startup/gc-cons-threshold 2)))

(defun gc-minibuffer-exit-hook ()
  (garbage-collect)
  (setq gc-cons-threshold startup/gc-cons-threshold))
#+end_src

Therefore, while the minibuffer is open, garbage collection will never occur, but once we make a selection, or cancel, garbage collection will kick off immediately and then revert back to the default, sensible behavior. This should fix any random freezing within Emacs.

** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

Since the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html][manual]] says that the main use case for this is for accessing remote files (which I never need), I can safely disable it:
#+begin_src emacs-lisp
(defvar startup/file-name-handler-alist file-name-handler-alist 
  "Original alist of elements (REGEXP . HANDLER) for file names handled specially (magic files).")
(setq file-name-handler-alist nil)

(defun startup/revert-file-name-handler-alist ()
  (setq file-name-handler-alist startup/file-name-handler-alist))
#+end_src

** Disable =site-run-file=

This file should contain sistem-wide customization. Since I'm not using a multi-user environment, I can disable it.

#+begin_src emacs-lisp
(setq site-run-file nil)
#+end_src

** Remove the splash startup screen

#+begin_src emacs-lisp
(customize-set-variable 'inhibit-splash-screen t)
#+end_src

** Remove the menu bar

You can always use =F10= to open the menu.

#+begin_src emacs-lisp
(customize-set-variable 'menu-bar-mode nil)
#+end_src

** Remove the tool bar

#+begin_src emacs-lisp
(customize-set-variable 'tool-bar-mode nil)
#+end_src

** Remove the scroll bar

#+begin_src emacs-lisp
(customize-set-variable 'scroll-bar-mode nil)
#+end_src

** Do not activate installed packages when Emacs starts

#+begin_src emacs-lisp
(customize-set-variable 'package-enable-at-startup nil)
#+end_src

** Load custom configuration

Emacs =custom= facility puts some "cryptic" entries into the =custom-set-variables= and =custom-set-faces= in the end of =init.el= file, which I have under version control. This causes a lot of conflicts when I update configuration across different machines.

This code offloads the =custom-set-variables= to a separate file. This keeps your =init.el= neater and you have the option to gitignore your =custom.el= if you see fit.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

;; Load custom file. Don't hide errors. Hide success message
(if (file-exists-p custom-file)
  (load custom-file nil t))
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

** Startup hooks

This hook runs after loading init files and handling the command line.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
(add-hook 'emacs-startup-hook 'startup/reset-gc)
(add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)
;;  Garbage Collect When Emacs is Out of Focus
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))))
#+end_src

* Init file
:properties:
:header-args+: :tangle "emacs/.emacs.d/init.el"
:header-args+: :shebang ";; -*- mode: emacs-lisp; lexical-binding: t; -*-"
:end:

When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you.

** Sane UI defaults

The settings here do not depend on any package. If you just want an improved vanilla Emacs experience, you can safely comment all the code after this section.

*** Sentences end with period

Emacs sentence commands assume that you follow the American typist’s convention of putting two spaces at the end of a sentence. That is, a sentence ends wherever there is a ‘.’, ‘?’ or ‘!’ followed by the end of a line or two spaces.

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

*** Smooth Scrolling

This is still better than using the new =pixel-scroll-mode=, at least until I learn how to configure it properly.
#+begin_src emacs-lisp
(setq
    ;; Scroll one line at a time when using mouse
    ;; This is less "jumpy" than the default behaviour.
    mouse-wheel-scroll-amount '(1 ((shift) . 1))
    
    ;; Don't accelerate scrolling
    ;; The original behaviour is to scroll as fast as the user moves the wheel.
    mouse-wheel-progressive-speed nil

    ;; Scroll window under mouse
    ;; Ensure that the mouse wheel scroll the window the mouse is over.
    mouse-wheel-follow-mouse 't

    ;; Keyboard scroll one line at a time
    scroll-step 1
) ;; End setq

;; Scroll window up/down by one line
;; Taken from http://pragmaticemacs.com/emacs/scrolling-and-moving-by-line/
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+end_src

*** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice:
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Show matching brackets

[[https://www.emacswiki.org/emacs/ShowParenMode][show-paren-mode]] allows one to see matching pairs of parentheses and other characters.
#+begin_src emacs-lisp
(show-paren-mode 1)
(setq
    ;; Remove delay before showing matched bracket
    show-paren-delay 0
) ;; End setq
#+end_src

*** Disable bell sound

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

*** Change backup behaviour

This is one of the things people usually want to change right away.

The built-in auto-backup feature is triggered when you save a file: Emacs will keep an old version of the file, adding =~= to its name. These are the files that usually clutter up your directory. Besides that, by default Emacs keep those backup files in the current directory.

This remove all files older than a week.

#+begin_src emacs-lisp
;; Enable default Emacs backup feature
(setq make-backup-files t)

(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.emacs_backups/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src

*** Save minibuffer history

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

*** Add my =~/.elisp= directory and other files

Sometimes I load files outside the package system. As long as they're in a directory in my =load-path=, Emacs can find them. 

#+begin_src emacs-lisp
(let* ((default-directory "~/.elisp")
       (orig-load-path load-path))
  (setq load-path (cons "~/.elisp" nil))
  (normal-top-level-add-subdirs-to-load-path)
  (nconc load-path orig-load-path))
#+end_src

*** Line numbering

Line numbering is really helpful for simple file movement.

#+begin_src emacs-lisp
(setq-default
    ;; Number of columns reserved for line number display
    display-line-numbers-width 4

    ;; Relative line numbers taking into account screen lines
    display-line-numbers-type 'visual

    ;; Display the absolute number of the current line
    display-line-numbers-current-absolute t

    ;; Disregard narrowing when showing line numbers
    display-line-numbers-widen t  
) ;; End setq-default

;; Do not shrink line number width
(setq display-line-numbers-grow-only t)


;; Show line numbers by default when programming
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Keybinding for toggling
;; The default is no line numbers. One can then toggle with =<f9>=.
(global-set-key (kbd "<f9>") 'display-line-numbers-mode)
#+end_src

*** Highlight current line

This is another setting which helps me locating within the buffer
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

*** Setup visual lines

Visual line mode actually does several things. From a user's point of view, it:
- Makes lines wrap at word boundaries. (controlled by var truncate-lines and word-wrap.)
- Makes up/down arrow keys move by a visual line. (controlled by the var line-move-visual.)
- Makes the kill-line command delete by a visual line, as opposed to a logical line.
- Turns off the display of little return arrow at the edge of window. (controlled by the var fringe-indicator-alist.)

Enable by default:
#+begin_src emacs-lisp
(global-visual-line-mode 1)
(global-set-key (kbd "<f8>") 'visual-line-mode)
#+end_src

and this code enable a visual hint whether a paragraph is hard or soften wrapped:
#+begin_src emacs-lisp
(defface my-custom-curly-face
  '((t (:foreground "orange")))
  "Face for fringe curly bitmaps."
  :group 'basic-faces)
(setq-default left-fringe-width 20)
(set-fringe-bitmap-face 'left-curly-arrow 'my-custom-curly-face)
(set-fringe-bitmap-face 'right-curly-arrow 'my-custom-curly-face)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src

*** Setup whitespace mode

#+begin_src emacs-lisp
(setq
    whitespace-line-column 80
    whitespace-style '(face lines-tail)

    ;; Make whitespace-mode with very basic background coloring for whitespaces.
    ;; http://ergoemacs.org/emacs/whitespace-mode.html
    whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark ))

    ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
    whitespace-display-mappings

    ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
    '(
      (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
      (newline-mark 10 [182 10]) ; LINE FEED,
      (tab-mark 9 [9655 9] [92 9]) ; tab
     )
) ;; End setq
#+end_src  

*** Show cursor as a bar

#+begin_src emacs-lisp
(setq-default cursor-type 'box)
(setq blink-cursor-interval 0.5)
#+end_src

*** No suspending Emacs on =C-z= or =C-x C-z=

I really dislike this!
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-z"))
#+end_src

*** Delete whatever is selected if typing starts

This reflects the behavior of other editors.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

*** String mode for =re-builder=

This slightly modifies the default behavior of regex builder, so it does not require you to double escape:
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
#+end_src

*** Create a hook when theme changes

Taken from [[https://www.reddit.com/r/emacs/comments/4v7tcj/does_emacs_have_a_hook_for_when_the_theme_changes/][here]]. This helps keeping the themes consistent in Org mode.

#+begin_src emacs-lisp
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

** Package management

Nowadays almost nobody uses Emacs without a pile of plugins/addons. Manage those addons is a pain in the ass. Fortunately Emacs 24 introduced a new tool, =package.el= to make this management a little easier.

By using the [[https://github.com/jwiegley/use-package][use-package]] macro one can isolate package configuration in your initialization files in a way that is both performance-oriented and tidy. It is a tool that streamlines the configuration of packages. handles everything from assigning key bindings, setting the value of customisation options, writing hooks, declaring a package as a dependency for another, and so on. 

Though it might not be readily apparent, a "package" in Emacs parlance is any elisp file that is evaluated by Emacs. This includes libraries that are shipped with the upstream distribution as well as code that comes from other sources.

As such =use-package= is *NOT* a package manager, in the sense of installing, removing, listing packages. It only configures things using a declarative syntax. The package manager of Emacs is =package.el= while there are other tools available from third parties, such as =straight.el=.

I’ve been using [[https://github.com/raxod502/straight.el][straight.el]] for package management for a while and I really like it.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

We can integrate it with =use-package=:
#+begin_src emacs-lisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src

** Customization

Here is where I give emacs my personal touch. My goal here is that each section works in an independent way from the others, so that I can comment without fear of break the configuration.

*** doom-themes

[[https://github.com/hlissner/emacs-doom-themes][Doom themes]] provides a nice collection of themes. I'm not sure how they behave on the terminal though!

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

*** which-key

On of the core ideas of Emacs is discoverability. It is a self-documented editor. To see this, check =C-h ?=.

However, after enabling a whole plethora of available packages you can get lost by the messiness of the enabled shortcuts.

[[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. This provides a way to discover shortcuts globally.

#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  ;; Don't wait too much for help buffer popup
  (setq which-key-idle-delay 0.1))
#+end_src

*** helm

Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. [[https://emacs-helm.github.io/helm][Helm]] is an interactive interface for completion in Emacs.

**** Main package

#+begin_src emacs-lisp
(use-package helm
  :defer t
  :bind
  ;; Overwrite some comands with their helm counterparts
  
  ("M-x" . helm-M-x)
  ("C-x r b" . helm-filtered-bookmarks)
  ("C-x C-f" . helm-find-files)

  ;; By default this binding will run find-file-read-only, a command
  ;; that finds a file but opens it as read only. I don't use this
  ;; functionality, so I remap to show a list of recent files
  ("C-x C-r" . helm-recentf)
  ("C-x b" . helm-mini)
  ("C-h a" . helm-apropos)
  ("M-y" . helm-show-kill-ring)
  
  :config
  (require 'helm-config)

  ;; Helm window shows up inside selected window
  (setq  helm-split-window-inside-p t)
  
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z") 'helm-select-action)
  (helm-mode 1))
#+end_src

**** "Derived" packages

Here I set other packages which depend on helm.

***** helm-swoop

[[https://github.com/emacsorphanage/helm-swoop][helm-swoop]] uses helm interface for letting you interactively edit all lines matching a given expression.

#+begin_src emacs-lisp
(use-package helm-swoop
  :bind
  ("M-i" . helm-swoop)
  
  :config

  ;; If you prefer fuzzy matching
  (setq helm-swoop-use-fuzzy-match t)
  
  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows t)
  
  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-horizontally)
  
  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color t)

  ;; When doing isearch, hand the word over to helm-swoop pressing M-o
  (bind-keys :map isearch-mode-map
             ("M-i" . helm-swoop-from-isearch))
  ;;(bind-keys :map helm-swoop-map
  ;;           ("M-o" . helm-multi-swoop-all-from-helm-swoop))

  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
)
#+end_src

***** helm-themes

Set themes with helm interface. The advantage here is that you can set a theme temporary by persistent action.

#+begin_src emacs-lisp
(use-package helm-themes)
#+end_src

***** helm-bibtex

#+begin_src emacs-lisp
;; (use-package helm-bibtex)
#+end_src

*** avy

[[https://github.com/abo-abo/avy][avy]] helps you jumping within *visible* text, no matter how many windows you have.

#+begin_src emacs-lisp
(use-package avy
  :init
  (unbind-key "M-g M-g")
  
  :bind 
  ("C-;" . avy-goto-char-timer)
  ("M-g M-g" . avy-goto-line)
  :config
  
  (setq avy-timeout-seconds 1.5))
#+end_src

*** ace-window

[[https://github.com/abo-abo/ace-window][ace-window]] is =other-window= on steroids

#+begin_src emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "M-o") 'ace-window))
#+end_src

*** transpose-frame

[[https://melpa.org/#/transpose-frame][transpose-frame]] enable transposing windows arrangement in a frame:
#+begin_src emacs-lisp
(use-package transpose-frame
  :bind
  ("C-x w t" . 'transpose-frame))
#+end_src

*** visual-regexp-steroids

[[https://github.com/benma/visual-regexp-steroids.el][visual-regexp-steroids]] works much like Emacs =replace-regexp=, but with live visual feedback directly in the buffer, and enables the use of modern regexp engines instead of Emacs one. This is really nice when used in conjunction with [[*helm-swoop]]

#+begin_src emacs-lisp
(use-package visual-regexp-steroids
  :init

  ;; Disable default =query-replace=
  (global-unset-key (kbd "M-%"))
  (define-key global-map (kbd "M-%") 'vr/replace)

  ;; to use visual-regexp-steroids's isearch instead of the built-in regexp isearch, also include the following lines:
  (global-unset-key (kbd "C-r"))
  (global-unset-key (kbd "C-s"))
  (global-set-key (kbd "C-r") 'vr/isearch-backward)
  (global-set-key (kbd "C-s") 'vr/isearch-forward)
)
#+end_src

*** magit

[[https://magit.vc/][Magit]] is a wonderful git interface for emacs.

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("<f10>" . magit-status))
#+end_src

*** undo-tree

#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode)
  :bind
  ("C-z" . undo-tree-undo)
  ("C-S-z" . undo-tree-redo))
#+end_src

*** pdf-tools

[[https://github.com/politza/pdf-tools][pdf-tools]] is a replacement DocView for pdf files:
#+begin_src emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query)
  (setq-default pdf-view-display-size 'fit-width))
#+end_src

*** programming/markup languages
**** Scheme

I have chosen [[https://www.gnu.org/software/guile/][Guile]] as my main scheme implementation, and for it there is [[https://www.nongnu.org/geiser/][Geiser]], which is much like slime for scheme:
#+begin_src emacs-lisp
(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :config
  (setq geiser-active-implementations '(guile))) 

(use-package rainbow-delimiters
  :config
  (add-hook 'geiser-mode-hook #'rainbow-delimiters-mode))

(use-package paredit
  :config
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'geiser-mode-hook           #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+end_src

**** Python

#+begin_src emacs-lisp
(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython"))
#+end_src

**** Ruby

#+begin_src emacs-lisp
(use-package inf-ruby)
#+end_src

**** SageMath

[[https://github.com/sagemath/sage-shell-mode][This package]] enable to run [[http://www.sagemath.org/][SageMath]] within Emacs.

#+begin_src emacs-lisp
(when (executable-find "sage") ;; Only configure when SageMath is installed!
  (use-package sage-shell-mode
    :config
    ;; Run SageMath by M-x run-sage instead of M-x sage-shell:run-sage
    (sage-shell:define-alias)
    
    ;; Turn on eldoc-mode in Sage terminal and in Sage source files
    (add-hook 'sage-shell-mode-hook #'eldoc-mode)
    (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode))

  ;; For integration with Babel, install [[https://github.com/stakemori/ob-sagemath][ob-sagemath]]:
  (use-package ob-sagemath)
) ;; End when
#+end_src

**** R

[[https://www.r-project.org/about.html][R]] is a language/environment for statistical computing. [[https://ess.r-project.org/][ESS]] is like slime for R. 
#+begin_src emacs-lisp
(use-package ess
  :config
  (setq
      ;; Use current directory of the file as workdir
      ess-ask-for-ess-directory nil

      ;; Set global history file
      ess-history-file "~/.Rhistory"
  ) ;; End setq
)
#+end_src

**** LaTeX

Since most of my markup is done with [[*Org][org-mode]], I rarely use LaTeX directly. However, since I have to deal with math snippets within org-mode and keep using LaTeX when writing a paper, it's nice to have it configured properly.
#+begin_src emacs-lisp
(use-package tex-site
  :straight auctex
  :defer t
  :mode ("\\.tex\\'" . latex-mode)
  :config
  ;; Use pdftex by default
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  ;; Helps using synctex
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  
  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq
      TeX-source-correlate-method 'synctex
      TeX-auto-save t
      ;; Parse file after loading it if no style hook is found for it.
      TeX-parse-self t
      ;; Don't ask to save before compile
      TeX-save-query nil
      TeX-view-program-selection '((output-pdf "PDF Tools"))
      reftex-plug-into-auctex t
  ) ;; End setq
)

;; For LaTeX preview in Org
;; Without this you cannot quick insert latex snippets within Org!
(use-package cdlatex :defer t)
#+end_src

**** Org

I have a dedicated file for this configuration:
#+begin_src emacs-lisp
(use-package org
  ;; Ensure we install from the latest!
  :straight
  '(org :type git :repo "https://code.orgmode.org/bzg/org-mode.git")
  :config
  (org-reload) ;; Reload org to avoid version clashing
  (load-file (expand-file-name "~/.emacs.d/org-configuration.el")))
#+end_src

*** modeline

We configure the modeline after most of the packages are loaded, so we can use a lot of additional info provided by then when needed.

**** Size (height)

One of the great things about the [[https://github.com/seagle0128/doom-modeline][doom-modeline]] is its size. This can be approximated by forming a box around the mode line face (be sure to set it for both the active and inactive mode line).

To preserve this configuration after loading a theme, I put this setting within [[*Create a hook when theme changes][after-load-theme-hook]]
#+begin_src emacs-lisp
(defun vct/set-modeline-colors ()
    (set-face-attribute 'mode-line nil
			:background "#353644"
			:foreground "white"
			:box '(:line-width 8 :color "#353644")
			:overline nil
			:underline nil)

    (set-face-attribute 'mode-line-inactive nil
			:background "#565063"
			:foreground "white"
			:box '(:line-width 8 :color "#565063")
			:overline nil
			:underline nil))

(add-hook 'after-load-theme-hook 'vct/set-modeline-colors)
(vct/set-modeline-colors)
#+end_src

**** VC info

#+begin_src emacs-lisp
(defun vct/vc-branch ()
  "Return version-control branch."
  (if vc-mode
      (let ((backend (vc-backend buffer-file-name)))
        (format
	 "[%s]"
	 (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))))
    ""))
#+end_src

**** Format

#+begin_src emacs-lisp
(setq-default mode-line-format
  '(
  ;; Error message
  "%e "
  ;; Window numbering
  (:eval (format winum-format (winum-get-number-string)))
  ;;(:eval (vct/modeline-get-evil-state))
  ;; value of current buffer name
  " %b | "
  ;; value of current line number
  "(line %l, col %c) "
  (:eval (propertize (format "%s" (vct/vc-branch)) 'face '(:foreground "gold")))
  ;; fill space
  (:eval (propertize " " 'display
         `((space :align-to (- (+ right right-fringe right-margin)
                               ,(+ 3 (string-width mode-name)))))))
  "%m" ;; This is right aligned!
))
#+end_src

** Additional keybindings
*** Save with <F12>

#+begin_src emacs-lisp
(global-set-key (kbd "<f12>") 'save-buffer)
#+end_src

*** Revert buffer with <F5>

Reverts (reloads from file) the current buffer without asking any questions. It will notify you in the minibuffer area that it did it.

#+begin_src emacs-lisp
(defun vct/revert-this-buffer ()
  (interactive)
  (revert-buffer nil t t)
  (message (concat "Reverted buffer " (buffer-name))))

(global-set-key (kbd "<f5>") 'vct/revert-this-buffer)
#+end_src

*** Fixing mark commands

From [[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][here]]:
#+begin_src emacs-lisp
(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))

(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
  This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))

(defun exchange-point-and-mark-no-activate ()
  "Identical to \\[exchange-point-and-mark] but will not activate the region."
  (interactive)
  (exchange-point-and-mark)
  (deactivate-mark nil))

(define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)
(global-set-key (kbd "C-`") 'push-mark-no-activate)
(global-set-key (kbd "M-`") 'jump-to-mark)
#+end_src

** COMMENT Custom key bindings

Here Is where I customize properly Emacs for my usage. It makes it behave a little like spacemacs or doom.

*** Define prefix group for which-key 

Taken from [[https://git.jeremydormitzer.com/jdormit/dotfiles/src/commit/bf8935a2caaeb5e0ea795e4a7272e7573cecd278/emacs/init.org#headline-5][here]]. Define the group in such a way it doesn't display =prefix=:

#+begin_src emacs-lisp
(defun jdormit/define-prefix (binding name)
    (which-key-add-key-based-replacements
      (concat leader " " binding)
      name)
    (which-key-add-key-based-replacements
      (concat "," " " binding)
      name))
#+end_src

*** Define leader key

Use the spacebar as a leader key in evil-mode's normal state and in various other modes:    
#+begin_src emacs-lisp
(defconst leader "SPC")

(general-define-key
  :states 'motion
  "SPC" nil)

(general-create-definer leader-def-key
  :states 'motion
  :prefix leader
  :prefix-map 'leader-map)
#+end_src

*** Get help

#+begin_src emacs-lisp
(jdormit/define-prefix "?" "help")
(leader-def-key "?" help-map)
#+end_src

*** Dotfile commands

#+begin_src emacs-lisp
(defun vct/find-dotfile ()
  (interactive)
  (find-file "~/.dotfiles/emacs.org"))

(jdormit/define-prefix "." "dotfile")
(leader-def-key ".f" #'vct/find-dotfile)
;;(leader-def-key ".r" 'reload-init-file)
#+end_src

*** File commands

#+begin_src emacs-lisp
(jdormit/define-prefix "f" "files")

(leader-def-key "fs" 'save-buffer)
(leader-def-key "ff" 'helm-find-files)
(leader-def-key "fr" 'helm-recentf)
#+end_src

*** Window commands

#+begin_src emacs-lisp
(jdormit/define-prefix "w" "windows")

(leader-def-key "w/" 'split-window-right)
(leader-def-key "w-" 'split-window-below)
(leader-def-key "wm" 'delete-other-windows)
(leader-def-key "wd" 'delete-window)

(leader-def-key "1" 'winum-select-window-1)
(leader-def-key "2" 'winum-select-window-2)
(leader-def-key "3" 'winum-select-window-3)
(leader-def-key "4" 'winum-select-window-4)
(leader-def-key "5" 'winum-select-window-5)
(leader-def-key "6" 'winum-select-window-6)
(leader-def-key "7" 'winum-select-window-7)
(leader-def-key "8" 'winum-select-window-8)
(leader-def-key "9" 'winum-select-window-9)
#+end_src

*** Buffer commands
**** Function to switch to previous buffer

from this [[http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/][blog post]]:
#+begin_src emacs-lisp
(defun vct/switch-to-previous-buffer ()
  "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src

**** Function to kill all buffers except the current one

From [[https://www.emacswiki.org/emacs/KillingBuffers#toc2][EmacsWiki]]:
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

**** Commands

#+begin_src emacs-lisp
(jdormit/define-prefix "b" "buffer")

(leader-def-key "TAB" 'vct/switch-to-previous-buffer)
(leader-def-key "bb" 'switch-to-buffer)
(leader-def-key "bd" 'kill-buffer)
(leader-def-key "bm" 'kill-other-buffers)
(leader-def-key "br" 'rename-buffer)
#+end_src

*** Undo/redo commands

#+begin_src emacs-lisp
(jdormit/define-prefix "u" "undo")

(leader-def-key "uu" 'undo)
(leader-def-key "ur" 'redo)
(leader-def-key "uv" 'undo-tree-visualize)
#+end_src

*** Toggle commands

Like in Spacemacs, put all toggle commands behind a prefix:
#+begin_src emacs-lisp
(jdormit/define-prefix "t" "toggle")

;;(leader-def-key "tt" 'toggle-truncate-lines)
(leader-def-key "tT" 'visual-line-mode)
(leader-def-key "tn" 'display-line-numbers-mode)
(leader-def-key "tw" #'whitespace-mode)   
#+end_src

*** Major mode commands
**** Org

#+begin_src emacs-lisp
(jdormit/define-prefix "o" "org")

(leader-def-key "oa" 'org-agenda)
(leader-def-key "oc" 'org-capture)
#+end_src
*** Application commands

#+begin_src emacs-lisp
(jdormit/define-prefix "a" "applications")

(leader-def-key "ad" 'deft)
#+end_src

*** Misc
**** Navigate throught window using =/=

I rarely do buffer search, so I can override =/=. When I want to do textual search I use helm-swoop.
#+begin_src emacs-lisp
(define-key evil-normal-state-map "/" 'avy-goto-char-timer)
#+end_src

**** Increase/decrease font

#+begin_src emacs-lisp
(jdormit/define-prefix "z" "zoom")

(leader-def-key "z=" 'text-scale-adjust)
(leader-def-key "z-" 'text-scale-adjust)
#+end_src

*** Quit commands

#+begin_src emacs-lisp
(jdormit/define-prefix "q" "quit")

(leader-def-key "qq" 'save-buffers-kill-emacs)
#+end_src

** COMMENT Load additional configuration
:properties:
:header-args+: :noweb-ref load-extra-configuration
:end:

To avoid constantly modifying this dotfile, you can keep any extra/testing configuration in a non-versioned file (defaults to =~/.custom.emacs.org=). You can keep your personal settings there and use some configuration for some time until you decide to move the code to this file. The file is loaded only if it exists:
#+begin_src emacs-lisp
(let ((personal-settings (expand-file-name "~/.custom.emacs.org")))
 (when (file-exists-p personal-settings)
   (org-babel-load-file personal-settings)))
#+end_src
:q
* Org configuration
:properties:
:header-args+: :tangle "emacs/.emacs.d/org-configuration.el"
:header-args+: :shebang ";; -*- mode: emacs-lisp; lexical-binding: t; -*-"
:end:

This is probably the most complex part of configuration. [[https://orgmode.org/][Org-mode]] is such a behemoth that it deserves a whole file for it!

** Set main variables

 Here I set the main directories used for my personal notes and bibliography.

 I add a prefix =vct/= so I can use almost the same name as the Emacs variable.

 #+begin_src emacs-lisp
 (setq org-directory "~/Dropbox/Org/")

 (defun vct/org-dir (fpath)
   "Expand FPATH relative to org-directory"
   (concat org-directory fpath))

 (setq vct/org-roam-directory (vct/org-dir "2.Archive/Cards/"))

 (let ((vct/bibliography (vct/org-dir "2.Archive/References/bibliography.bib")))
     (setq vct/bibtex-completion-bibliography vct/bibliography)
     (setq vct/bibtex-completion-library-path vct/bibliography)
     (setq vct/reftex-default-bibliography `(,vct/bibliography))
     (setq vct/org-ref-bibliography-notes vct/bibliography)
     (setq vct/org-ref-default-bibliography `(,vct/bibliography)))

 (setq vct/deft-directory org-directory)
 (setq vct/org-default-notes-file (vct/org-dir "1.Inbox/notebook.org"))
 (setq vct/org-archive-location (vct/org-dir "2.Archive/archive.org::"))

 (setq vct/org-noter-notes-search-path `(,(vct/org-dir "2.Archive/References/")))
 (setq vct/org-ref-pdf-directory (vct/org-dir "2.Archive/Library/"))
 (setq vct/org-ref-notes-directory (vct/org-dir "2.Archive/References"))
 (setq vct/bibtex-completion-find-note-functions '(orb-find-note-file))
 #+end_src

** Initial visibility

 Entering Org mode will switch to OVERVIEW

 #+begin_src emacs-lisp
 (setq org-startup-folded t)
 #+end_src

** Clean view

 Org’s default outline with stars and no indents can become too cluttered for short documents. For book-like long documents, the effect is not as noticeable. Org provides an alternate stars and indentation scheme, as shown on the right in the following table. It uses only one star and indents text to line with the heading:

 #+begin_src emacs-lisp
 (add-hook 'org-mode-hook 'org-indent-mode)
 #+end_src

** Block invisible edits

 Don't allow to edit subtree when folded

 #+begin_src emacs-lisp
 (setq org-catch-invisible-edits 'show-and-error)
 #+end_src

** Set folding symbol

 The =...= ellipsis that org-mode uses to indicate hidden content is usually just fine. It’s only when you’re staring at a document where every line is a folded headline, that you start to feel like they’re a little too much. Choosing a "smaller" one reduces the visual clutter: 
 #+begin_src emacs-lisp
 ;;(setq org-ellipsis "  ")
 (setq org-ellipsis "…")
 #+end_src

** Fix Org bullets when changing theme

 Taken from [[https://www.reddit.com/r/emacs/comments/906bnj/after_switching_the_custom_theme_leading_stars/][here]].
 #+begin_src emacs-lisp
 (add-hook 'after-load-theme-hook
	   (lambda ()
	     (save-current-buffer
	       (mapc (lambda (b)
		       (set-buffer b)
		       (when (equal major-mode 'org-mode)
			 (progn
			   (font-lock-fontify-buffer)
			   (set-face-attribute
			    'org-hide nil
			    :foreground (face-attribute 'default :background)))))
		     (buffer-list)))))
 #+end_src

** Startup with inline image previews

 #+begin_src emacs-lisp
 (setq org-startup-with-inline-images t)

 (defun vct/org-redisplay-inline-images ()
   (org-display-inline-images nil t)
   (org-redisplay-inline-images))

 ;; Always show inline images:
 (add-hook 'org-mode-hook 'vct/org-redisplay-inline-images)
 (add-hook 'org-babel-after-execute-hook 'vct/org-redisplay-inline-images)
 #+end_src

** LaTeX behaviour
*** Startup with LaTeX previews

 #+begin_src emacs-lisp
 (setq org-startup-with-latex-preview t)
 #+end_src

*** Quick insertion of LaTeX environment

 #+begin_src emacs-lisp
 (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
 #+end_src

*** LaTeX code syntax highlighting

 #+begin_src emacs-lisp
 (setq org-highlight-latex-and-related '(native latex script entities))
 #+end_src

*** Previewing fragments
**** Fix fragment preview scale when font-resizing

 Solution from [[https://ipfs-sec.stackexchange.cloudflare-ipfs.com/emacs/A/question/3387.html][here]]. This can be a little bit slow, since it regenerates all fragments within the file.

 #+begin_src emacs-lisp
 (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

 (defun update-org-latex-fragments ()
   (org-latex-preview '(4)) ;; Clear all fragments in the buffer
   (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
     (plist-put org-format-latex-options :scale (* 2.1 text-scale-factor))
     ;; Print scale factor on *Messages* buffer
     (princ (plist-get org-format-latex-options :scale)))
   (org-latex-preview '(3))) ;; Display all fragments in the buffer

 (add-hook 'org-mode-hook
	   (lambda ()
	     (add-hook 'text-scale-mode-hook
		       'update-org-latex-fragments nil 'make-it-local)))
 #+end_src

**** Fix fragment preview numbering

 In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. However, each fragment is created in isolation, meaning that numbering is almost always wrong, and typically with each numbered equation starting with (1). [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][This hack]], stolen from John Kitchin, solves this in a nice way for my purposes.
 #+begin_src emacs-lisp
 (require 'cl-lib)
 (require 'cl)

 (defun org-renumber-environment (orig-func &rest args)
   "Improve equation numbering"
   (let ((results '())
         (counter -1)
         (numberp))
     (setq results (loop for (begin . env) in
                         (org-element-map (org-element-parse-buffer) 'latex-environment
                           (lambda (env)
                             (cons
                              (org-element-property :begin env)
                              (org-element-property :value env))))
                         collect
                         (cond
                          ((and (string-match "\\\\begin{equation}" env)
				(not (string-match "\\\\tag{" env)))
                           (incf counter)
                           (cons begin counter))
                          ((string-match "\\\\begin{align}" env)
                           (prog2
                               (incf counter)
                               (cons begin counter)
                             (with-temp-buffer
                               (insert env)
                               (goto-char (point-min))
                               ;; \\ is used for a new line. Each one leads to a number
                               (incf counter (count-matches "\\\\$"))
                               ;; unless there are nonumbers.
                               (goto-char (point-min))
                               (decf counter (count-matches "\\nonumber")))))
                          (t
                           (cons begin nil)))))
     (when (setq numberp (cdr (assoc (point) results)))
       (setf (car args)
             (concat
              (format "\\setcounter{equation}{%s}\n" numberp)
              (car args)))))
   (apply orig-func args))

 (advice-add 'org-create-formula-image :around #'org-renumber-environment)
 #+end_src

**** Fix fragment color

 This code changes the color of the fragment based on the current theme.

 #+begin_src emacs-lisp
 (defun vct-update-org-latex-fragment-colors ()
   (org-latex-preview '(4))
   (setq org-format-latex-options (plist-put org-format-latex-options :foreground (face-attribute 'default :foreground)))
   (setq org-format-latex-options (plist-put org-format-latex-options :background (face-attribute 'default :background)))
   (org-latex-preview '(3)))

 (add-hook 'org-mode-hook
	   (lambda ()
	     (add-hook 'after-load-theme-hook
		       'vct-update-org-latex-fragment-colors nil 'make-it-local)))
 #+end_src

** Babel configuration
*** Do not ask for confirmation when executing code block

 #+begin_src emacs-lisp
 (setq org-confirm-babel-evaluate nil)
 #+end_src

*** Make TABS act natively on code blocks

 #+begin_src emacs-lisp
 (setq org-src-tab-acts-natively t)
 #+end_src

*** Preserve leading whitespace on export

 #+begin_src emacs-lisp
 (setq org-src-preserve-indentation t)
 #+end_src

*** Helper functions

 These functions help to set header args
 #+begin_src emacs-lisp
 (setq vct/lang-header-args 
       '((R . org-babel-header-args:R) (ruby . org-babel-header-args:ruby)))

 (defun vct/set-default-headers-args (lang property value)
   "Easily set system header arguments in org mode.

 LANG is a symbol for the language that you would like to modify the header.

 PROPERTY is the system-wide value that you would like to modify.

 VALUE is the new value you wish to store.

 Example: (vct/set-default-headers-args 'R 'width 10)"
   (let ((lang-var (cdr (assq lang vct/lang-header-args))))
     (setq lang-var
           (cons (cons property value)
		 (assq-delete-all property (eval lang-var))))))
 #+end_src

*** Load languages

 #+begin_src emacs-lisp
 (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (shell . t)
     (R . t)
     (scheme . t)))
 #+end_src

*** Set default header arguments

 #+begin_src emacs-lisp
 (setq org-babel-default-header-args:ruby '((:session . "ruby")
                                            (:noweb . "yes")
                                            (:results . "output")))

 (setq org-babel-default-header-args:R '((:session . "*R*")
                                         (:noweb . "yes")
                                         (:results . "output")))

 ;; Ob-sagemath supports only evaluating with a session.
 (setq org-babel-default-header-args:sage '((:session . t)
                                            (:noweb . "yes")
                                            (:results . "output")))
 ;;;; C-c c for asynchronous evaluating (only for SageMath code blocks).
 ;;;;(define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async)
 #+end_src

** Agenda configuration

 #+begin_src emacs-lisp
 ;;(setq vct/org-agenda-todo-view
 ;;      `("a" "Agenda"
 ;;        (
 ;;         (tags "website" )
 ;;         (todo "TODO"
 ;;               ((org-agenda-overriding-header "To Refile")
 ;;                (org-agenda-files '("~/Dropbox/Org/1.Inbox/notebook.org"))))
 ;;         nil)))
 ;;
 ;;(add-to-list 'org-agenda-custom-commands `,vct/org-agenda-todo-view)
 (with-eval-after-load 'org-agenda
   (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))
  
   (setq vct/org-agenda-bookmarks
     `("b"  "List of bookmarks"
       ((tags "LEVEL=2+website")
	(tags "LEVEL=2+link"))))
  
   (add-to-list 'org-agenda-custom-commands `,vct/org-agenda-bookmarks))
 #+end_src

** Zettelkasten

 My personal notes are structured trying to follow as much as possible the concept of the famous "slip box" of [[https://pt.wikipedia.org/wiki/Niklas_Luhmann][Niklas Luhmann]], as described in the book
 - [[https://www.amazon.com.br/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y][How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking – for Students, Academics and Nonfiction Book Writers]]

 The aim is to have notes created using org capture facilities, organized using [[https://jblevins.org/projects/deft/][Deft]] and exported using Org publishing capabilities.
*** Setup org-protocol

 #+begin_src emacs-lisp
 ;; Org capture with steroids!
 (require 'org-protocol)
  
 ;; Convert buffer text and decorations to HTML
 (use-package htmlize)

 ;; Library functions and commands useful for retrieving web page
 ;; content and processing it into Org-mode content.
 (use-package org-web-tools)
 (use-package org-protocol-capture-html
   :straight (org-protocol-capture-html :type git :host github :repo "alphapapa/org-protocol-capture-html"))

 ;; Automatic latex preview
 (use-package org-fragtog
   :config
   (add-hook 'org-mode-hook 'org-fragtog-mode))
 #+end_src

*** Setup org-roam

 #+begin_src emacs-lisp
 (use-package org-roam
   :config
   (setq org-roam-directory vct/org-roam-directory)
   (setq org-roam-graph-viewer (executable-find "firefox"))
   (setq bibtex-completion-bibliography vct/bibtex-completion-bibliography )
   (setq bibtex-completion-library-path vct/bibtex-completion-library-path)
   (setq reftex-default-bibliography vct/reftex-default-bibliography)
   (setq org-ref-bibliography-notes vct/org-ref-bibliography-notes)
   (setq bibtex-completion-find-note-functions vct/bibtex-completion-find-note-functions)

   ;; Set automatic key generator for Bibtex entries
   (setf bibtex-autokey-additional-names "etal"
         bibtex-autokey-name-separator "-"
         bibtex-autokey-name-year-separator "-"
         bibtex-autokey-year-title-separator "-"
         bibtex-autokey-titleword-separator "-"
         bibtex-autokey-year-length 4
         bibtex-autokey-names 1
         bibtex-autokey-names-stretch 1
         bibtex-autokey-titlewords-stretch 1
         bibtex-autokey-titlewords-length 1
         bibtex-autokey-titlewords 2)

   (setq org-roam-graph-exclude-matcher '("private"))

   (setq org-roam-capture-templates 
     '(("d" "default" plain #'org-roam-capture--get-point "%?" :file-name "%<%Y%m%d%H%M%S>" :head "#+title: ${title}
 #+created: %U
 #+last_modified: %U
 #+roam_tags: 
 " :unnarrowed t)))
 ) 

 (use-package org-roam-server)
 (use-package org-roam-bibtex)
 #+end_src

*** Setup org-noter

 #+begin_src emacs-lisp
 (use-package org-noter
   :config
   (setq
       org-noter-pdftools-markup-pointer-color "yellow"
       org-noter-notes-search-path vct/org-noter-notes-search-path
       ;; org-noter-insert-note-no-questions t
       org-noter-doc-split-fraction '(0.7 . 03)
       org-noter-always-create-frame nil
       org-noter-hide-other nil
       org-noter-pdftools-free-pointer-icon "Note"
       org-noter-pdftools-free-pointer-color "red"
       org-noter-kill-frame-at-session-end nil)
 )
 #+end_src

*** Setup org-pdftools

 #+begin_src emacs-lisp
 (use-package org-pdftools
   :hook (org-load . org-pdftools-setup-link))

 (use-package org-noter-pdftools
   :after org-noter
   :config
   (with-eval-after-load 'pdf-annot
     (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
 #+end_src

*** Setup org-ref

 #+begin_src emacs-lisp
 (use-package org-ref
   :config
   (setq org-ref-default-bibliography vct/org-ref-default-bibliography
	     org-ref-pdf-directory vct/org-ref-pdf-directory
	     org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
	     org-ref-notes-directory vct/org-ref-notes-directory
	     org-ref-notes-function 'orb-edit-notes))
 #+end_src

*** Setup org-download

 [[https://github.com/abo-abo/org-download][Org-download]] lets you screenshot and yank images from the web into your notes:

 #+begin_src emacs-lisp
 (use-package org-download
   ;;:after org-roam
   :config
   ;;(setq org-download-image-dir (expand-file-name (concat org-roam-directory "img/")))
   (setq org-download-screenshot-method "spectacle --background --region --output %s")
 )
 #+end_src

*** Setup deft

 [[https://jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.

 #+begin_src emacs-lisp
 (use-package deft
   :bind
   ;;("<f12>" . deft)
   ("C-x C-g" . deft-find-file)
   :config
   (setq deft-directory vct/deft-directory)
   (setq deft-recursive t)
   (setq deft-default-extension "org")
   (setq deft-extensions '("org" "gpg" "md" "txt" "tid"))
   (setq deft-use-filename-as-title nil)
   (setq deft-use-filter-string-for-filename t)
   (setq deft-file-naming-rules '((noslash . "-")
				  (nospace . "-")
				  (case-fn . downcase)))
   (setq deft-text-mode 'org-mode))
 #+end_src

*** Set timestamps

 https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/4

 #+begin_src emacs-lisp
 ;; Handling file properties for ‘CREATED’ & ‘LAST_MODIFIED’
 (defun zp/org-find-time-file-property (property &optional anywhere)
   "Return the position of the time file PROPERTY if it exists.
 When ANYWHERE is non-nil, search beyond the preamble."
   (save-excursion
     (goto-char (point-min))
     (let ((first-heading
            (save-excursion
              (re-search-forward org-outline-regexp-bol nil t))))
       (when (re-search-forward (format "^#\\+%s:" property)
				(if anywhere nil first-heading)
				t)
	 (point)))))

 (defun zp/org-has-time-file-property-p (property &optional anywhere)
   "Return the position of time file PROPERTY if it is defined.
 As a special case, return -1 if the time file PROPERTY exists but
 is not defined."
   (when-let ((pos (zp/org-find-time-file-property property anywhere)))
     (save-excursion
       (goto-char pos)
       (if (and (looking-at-p " ")
		(progn (forward-char)
                       (org-at-timestamp-p 'lax)))
           pos
         -1))))

 (defun zp/org-set-time-file-property (property &optional anywhere pos)
   "Set the time file PROPERTY in the preamble.
 When ANYWHERE is non-nil, search beyond the preamble.
 If the position of the file PROPERTY has already been computed,
 it can be passed in POS."
   (when-let ((pos (or pos
                       (zp/org-find-time-file-property property))))
     (save-excursion
       (goto-char pos)
       (if (looking-at-p " ")
           (forward-char)
         (insert " "))
       (delete-region (point) (line-end-position))
       (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
         (insert now)))))

 (defun zp/org-set-last-modified ()
   "Update the LAST_MODIFIED file property in the preamble."
   (when (derived-mode-p 'org-mode)
     (zp/org-set-time-file-property "LAST_MODIFIED")))

 (add-hook 'before-save-hook #'zp/org-set-last-modified)
 #+end_src

*** Set fleeting notes location

 Fleeting notes are the entry point for taking notes in a smart way. As the name says, they are supposed to be ephemeral, for dumping whatever it is in your head.

 #+begin_src emacs-lisp
 (setq org-default-notes-file vct/org-default-notes-file)
 (setq org-archive-location vct/org-archive-location)
 #+end_src

*** Customize capture templates

 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
	      `("t" "Task"  entry
		(file+headline org-default-notes-file "Tasks")
		"* TODO %?\n%T\n %i\n %a" :empty-lines 1))
 (add-to-list 'org-capture-templates
	      `("n" "Quick Note"  entry
		(file+headline org-default-notes-file "Notes")
		"* NOTE %?" :empty-lines 1))

 ;;(setq jethro/org-agenda-directory "~/.org/gtd/")
 ;; Template for org-capture
 #+end_src

**** Templates for using with org-protocol
***** Capture link only

 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
       `("c" "org-protocol-capture" entry (file+headline org-default-notes-file "Bookmarks")
          "* TODO [[%:link][%:description]] :link:\n\n %i" :immediate-finish t))
 #+end_src

***** Capture webpage

 #+begin_src emacs-lisp
 (add-to-list 'org-capture-templates
       `("w" "Web site" entry
	   (file+headline org-default-notes-file "Bookmarks")
	   "* %c :website:\n%U %?%:initial" :immediate-finish t))
 #+end_src


