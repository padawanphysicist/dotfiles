#+title: Emacs configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an extensible, customizable, [[https://www.gnu.org/philosophy/free-sw.html][free/libre]] text editor. It is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.

* Early init file
:properties:
:header-args+: :tangle "emacs/.config/emacs/early-init.el"
:header-args+: :shebang ";; -*- mode: emacs-lisp; lexical-binding: t; -*-"
:end:

Emacs 27+ introduces =early-init.el=, which is run before =init.el=, before package and UI initialization happens. Therefore we can customize in it variables that affect frame appearance as well as the package initialization process.

** Defer garbage collection further back in the startup process

This helps reduce initialization time.

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Disable menu bar

You can always use =F10= to open the menu.

#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
#+end_src

** Remove tool bar

I never use it.

#+begin_src emacs-lisp
(push '(tool-bar-lines . 0) default-frame-alist)
#+end_src

** Remove scroll bar

#+begin_src emacs-lisp
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

** Package management

Nowadays almost nobody uses Emacs without a pile of plugins/addons. Manage those addons is a pain in the ass. Fortunately Emacs 24 introduced a new tool, =package.el= to make this management a little easier.

By using the [[https://github.com/jwiegley/use-package][use-package]] macro one can isolate package configuration in your initialization files in a way that is both performance-oriented and tidy.

This piece if modified from https://melpa.org/#/getting-started:
#+begin_src emacs-lisp
(require 'package)

;; Do not activate installed packages when Emacs starts
(setq package-enable-at-startup nil)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

(unless package--initialized (package-initialize))
#+end_src

and now we configure use-package:
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; Causes all packages to be installed automatically if not already
;; present in the system
(setq use-package-always-ensure t)
#+end_src

* Init file
:properties:
:header-args+: :tangle "emacs/.config/emacs/init.el"
:header-args+: :shebang ";; -*- mode: emacs-lisp -*-"
:end:

** Better defaults

The settings here modify the default behaviour of Emacs, and do not depend on any package.

*** Smooth Scrolling
**** Scroll one line at a time

This is less "jumpy" than the default behaviour.

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+end_src

**** Don't accelerate scrolling

The original behaviour is to scroll as fast as the user moves the wheel.

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

**** Scroll window under mouse

Ensure that the mouse wheel scroll the window the mouse is over.

#+begin_src emacs-lisp
(setq mouse-wheel-follow-mouse 't)
#+end_src

**** Keyboard scroll one line at a time

#+begin_src emacs-lisp
(setq scroll-step 1)
#+end_src

**** Scroll window up/down by one line

Taken from [[http://pragmaticemacs.com/emacs/scrolling-and-moving-by-line/][here]]:
#+begin_src emacs-lisp
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+end_src

*** Change "yes or no" to "y or n"

Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Show matching brackets

[[https://www.emacswiki.org/emacs/ShowParenMode][show-paren-mode]] allows one to see matching pairs of parentheses and other characters. 
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

By default, thereâ€™s a small delay before showing a matching parenthesis. It can be deactivated with the following:
#+begin_src emacs-lisp
(setq show-paren-delay 0)
#+end_src

*** Disable bell sound

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

*** Change backup behaviour

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
;; Don't litter my filesystem tree
(setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
#+end_src

Since disk space is cheap, I prefer to save a lot!
#+begin_src emacs-lisp
(setq backup-by-copying t) ;; don't clobber symlinks
(setq delete-old-versions t)
(setq kept-new-versions 8)
(setq kept-old-versions 4)
(setq version-control t)
#+end_src

*** Save minibuffer history

#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src

*** Add my elisp directory and other files

Sometimes I load files outside the package system. As long as they're in a directory in my =load-path=, Emacs can find them. 

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.elisp")
#+end_src

*** Line numbering

Line numbering is really helpful for simple file movement.

**** Number of columns reserved for line number display

#+begin_src emacs-lisp
(setq-default display-line-numbers-width 4)
#+end_src

**** Do not shrink line number width

#+begin_src emacs-lisp
(setq display-line-numbers-grow-only t)
#+end_src

**** Relative line numbers taking into account screen lines

#+begin_src emacs-lisp
(setq-default display-line-numbers-type 'visual)
#+end_src

**** Display the absolute number of the current line

#+begin_src emacs-lisp
(setq-default display-line-numbers-current-absolute t)
#+end_src

**** Disregard narrowing when showing line numbers

#+begin_src emacs-lisp
(setq-default display-line-numbers-widen t)
#+end_src

**** Enable only for some modes

#+begin_src emacs-lisp
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

**** Show cursor position within line

#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

*** Setup visual lines

Visual line mode actually does several things. From a user's point of view, it:
- Makes lines wrap at word boundaries. (controlled by var truncate-lines and word-wrap.)
- Makes up/down arrow keys move by a visual line. (controlled by the var line-move-visual.)
- Makes the kill-line command delete by a visual line, as opposed to a logical line.
- Turns off the display of little return arrow at the edge of window. (controlled by the var fringe-indicator-alist.)

Enable by default:
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

and this code enable a visual hint whether a paragraph is hard or soften wrapped:
#+begin_src emacs-lisp
(defface my-custom-curly-face
  '((t (:foreground "orange")))
  "Face for fringe curly bitmaps."
  :group 'basic-faces)
(setq-default left-fringe-width 10)
(set-fringe-bitmap-face 'left-curly-arrow 'my-custom-curly-face)
(set-fringe-bitmap-face 'right-curly-arrow 'my-custom-curly-face)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src

*** Load custom configuration

 Emacs =custom= facility puts some "cryptic" entries into the =custom-set-variables= and =custom-set-faces= in the end of =init.el= file, which I have under version control. This causes a lot of conflicts when I update configuration across different machines.

 This code offloads the =custom-set-variables= to a separate file. This keeps your =init.el= neater and you have the option to gitignore your =custom.el= if you see fit.

 #+begin_src emacs-lisp
 (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
 (unless (file-exists-p custom-file)
   (write-region "" nil custom-file))

 ;; Load custom file. Don't hide errors. Hide success message
 (if (file-exists-p custom-file)
   (load custom-file nil t))
 #+end_src

**** COMMENT Enable PATH within Emacs

 With [[https://github.com/purcell/exec-path-from-shell][this]] package Emacs read =$PATH= from the shell:
 #+begin_src emacs-lisp
 (use-package exec-path-from-shell
   :config
   (progn
     (setq exec-path-from-shell-check-startup-files nil)
     (exec-path-from-shell-initialize)))
 #+end_src

*** Improve garbage collection

 The [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][garbage collection]] in Emacs is very simple. You allocate some bytes and once you pass a certain threshold, it garbage collects.

 It turns out that the default behavior is to garbage collect very often. And because there is so little garbage to collect each time, you will not notice any lag. The problem is when you use memory-intensive features like =helm= on a large collection. The solution is mentioned in the manual:

 #+begin_example
 The initial threshold value is GC_DEFAULT_THRESHOLD, defined in alloc.c. Since it's defined in word_size units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one. If you specify a larger value, garbage collection will happen less often. This reduces the amount of time spent garbage collecting, but increases total memory use. You may want to do this when running a program that creates lots of Lisp data. 
 #+end_example

 #+begin_src emacs-lisp
 (defun vct--minibuffer-setup-hook ()
   (setq gc-cons-threshold most-positive-fixnum))

 (defun vct--minibuffer-exit-hook ()
   (setq gc-cons-threshold 800000))

 (add-hook 'minibuffer-setup-hook #'vct--minibuffer-setup-hook)
 (add-hook 'minibuffer-exit-hook #'vct--minibuffer-exit-hook)
 #+end_src

 Therefore, while the minibuffer is open, garbage collection will never occur, but once we make a selection, or cancel, garbage collection will kick off immediately and then revert back to the default, sensible behavior. This should fix any random freezing within Emacs.

*** Disable splash screen

 #+begin_src emacs-lisp
 (setq inhibit-startup-message t) 
 ;; (setq initial-scratch-message nil)
 #+end_src

** COMMENT User interface
*** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  ;; Set the banner
  (setq dashboard-startup-banner 'logo)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

*** COMMENT Set theme
**** Install themes

 #+begin_src emacs-lisp
 (use-package spacemacs-theme
   :defer t
   :config
   (setq spacemacs-theme-org-height nil))
 #+end_src

**** Set Dark/Light themes

 #+begin_src emacs-lisp
 ;; In the case you want to use multiple themes
 ;; (defvar *vct-themes* '(doom-one doom-solarized-light spacemacs-dark spacemacs-light moe-dark moe-light tsdh-dark tsdh-light jbeans whiteboard))

 (defvar *vct-themes* '(spacemacs-light spacemacs-dark))
 #+end_src

**** Loop over themes

I use =F6= and =S-F6= to loop forward/backward into the list of defined themes

#+begin_src emacs-lisp
(defvar *vct-current-theme-index* 0)

(defun vct--load-theme-no-frame ()
  (load-theme (elt *vct-themes* *vct-current-theme-index*) t)
  (setq *vct-current-theme-index* (1+ *vct-current-theme-index*)))

(defun vct--load-theme-frame (frame)
  (select-frame frame)
  (load-theme (elt *vct-themes* *vct-current-theme-index*) t))

(if (daemonp)
    (add-hook 'after-make-frame-functions #'vct--load-theme-frame)
  (vct--load-theme-no-frame))


;; (add-hook 'after-make-frame-functions
;; 	  (lambda (frame)
;; 	    (select-frame frame)
;; 	    (if (display-graphic-p)
;; 		;; Or whatever you want to run for GUI frames.
;; 		(progn
;; 		  (load-theme (elt *vct-themes* *vct-current-theme-index*) t)
;; 		  (setq *vct-current-theme-index* (1+ *vct-current-theme-index*)))
;; 	      ;; Terminal config

;; 	      )))
	;; (progn
	;; 	  (load-theme (elt *vct-themes* *vct-current-theme-index*) t)
	;; 	  (setq *vct-current-theme-index* (1+ *vct-current-theme-index*)))
  

(defun vct--loop-over-theme (arg)
  (interactive)
  ;; Disable all custom enabled themes
  (mapcar #'disable-theme custom-enabled-themes)
  (let ((to-be-loaded (elt *vct-themes* (% *vct-current-theme-index* (length *vct-themes*)))))
    (message (format "Loading theme %s" to-be-loaded) )
    (load-theme to-be-loaded t))
  (setq *vct-current-theme-index*
        (let ((new-idx (+ arg *vct-current-theme-index*)))
          (if (< new-idx 0)
              (+ new-idx (+ 1 (length *vct-themes*)))
            new-idx))))
(defun vct--loop-over-forward () (interactive)(vct--loop-over-theme 1))
(defun vct--loop-over-backward () (interactive)(vct--loop-over-theme -1))

(global-set-key (kbd "<f6>") 'vct--loop-over-forward)
(global-set-key (kbd "S-<f6>") 'vct--loop-over-backward)
#+end_src

**** Create a hook for when theme changes

Taken from [[https://www.reddit.com/r/emacs/comments/4v7tcj/does_emacs_have_a_hook_for_when_the_theme_changes/][here]].

#+begin_src emacs-lisp
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

*** COMMENT Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-icon t)
  (doom-modeline-mode 1))
#+end_src

** COMMENT Enhance user experience
*** Sane undo/redo

The =undo-tree-mode= replaces Emacs' undo system with a system that treats undo history as a branching tree of changes:

#+begin_src emacs-lisp
(use-package undo-tree
  :bind
  ("C-z" . undo)
  ("C-S-z" . redo)
  :config
  ;; Turn on everywhere
  (global-undo-tree-mode 1)
  ;; Each node in the tree should have a timestamp
  (setq undo-tree-visualizer-timestamps t)
  ;; Show a diff window displaying changes between undo nodes
  (setq undo-tree-visualizer-diff t))
#+end_src

*** Visualizing colors

#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

*** Custom Functions
**** Move text to scratch buffer

#+begin_src emacs-lisp
(defun vct/move-region-to-other-window (start end)
  "Move selected text to other window"
  (interactive "r")
  (if (use-region-p)
      (let ((count (count-words-region start end)))
        (save-excursion
          (kill-region start end)
          (other-window 1)
          (yank)
          (newline))
        (other-window -1)
        (message "Moved %s words" count))
    (message "No region selected")))
#+end_src

**** Delete all other buffers

#+begin_src emacs-lisp
(defun vct/kill-other-buffers ()
  "Kill all buffers except the current one and *Messages* and *scratch* and *dashboard*"
  (interactive)
  (mapc 'kill-buffer (remove-if
                      (lambda (buf)
                        (or
                         (eq buf (current-buffer))
                         (member (buffer-name buf) '("*dashboard*" "*Messages*" "*scratch*"))))
                      (buffer-list)))
  (delete-other-windows))
#+end_src

**** Copy line

#+begin_src emacs-lisp
(defun vct/copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring.
      Ease of use features:
      - Move to start of next line.
      - Appends the copy on sequential calls.
      - Use newline as last char even on the last line of the buffecopy-liner.
      - If region is active, copy its lines."
  (interactive "p")
  (save-excursion
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg))))

(global-set-key "\C-c\C-k" 'vct/copy-line)
#+end_src

** COMMENT Diminish minor modes

[[https://github.com/myrjola/diminish.el][diminish]] allows hiding or abbreviate minor mode display on the modeline:
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** COMMENT Make Emacs discoverable

Emacs by default is built around this idea of discoverability. It is a self-documented editor. To see this, check =C-h ?=. 

However, after enabling a whole plethora of available packages you can get lost by the messiness of the enabled shortcuts. 

[[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. This provides a way to discover shortcuts globally.

#+begin_src emacs-lisp
(use-package which-key
  :init 
  ;; Decrease the delay for which-key buffer to popup
  (setq which-key-idle-delay 0.02)
  :config 
  (which-key-mode))
#+end_src

** COMMENT Completion framework

Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. [[https://emacs-helm.github.io/helm][Helm]] is an interactive interface for completion in Emacs.

#+begin_src emacs-lisp
(use-package helm
  :defer t
  :bind
  ("M-x" . helm-M-x)
  ("C-x r b" . helm-filtered-bookmarks)
  ("C-x C-f" . helm-find-files)
  ("C-x C-r" . helm-recentf)
  ("C-x C-b" . helm-mini)
  ("C-h a" . helm-apropos)
  ("M-y" . helm-show-kill-ring)
  :config
  (require 'helm-config)
  (setq helm-candidate-number-limit nil)
  
  ;; From https://gist.github.com/antifuchs/9238468
  (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
        helm-input-idle-delay 0.01  ; this actually updates things
                                    ; reeeelatively quickly.
        helm-yas-display-key-on-candidate t
        helm-quick-update t
        helm-M-x-requires-pattern nil
        helm-ff-skip-boring-files t)
  (helm-mode 1))
#+end_src

** COMMENT Improve navigation

[[https://github.com/abo-abo/avy][Avy]] allows you to navigate to every visible portion of your Emacs (buffers & windows) with only a handful of keystrokes.

#+begin_src emacs-lisp
(use-package avy
  :bind
  ("C-;" . avy-goto-char-timer)
  ("M-g l" . 'avy-goto-line)
  ("M-g w" . 'avy-goto-word-1)
  :config
  (setq avy-background t))
#+end_src

** COMMENT Templating

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a nice templating system for Emacs.

#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs '("~/.yasnippet"))
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  (yas-reload-all))
#+end_src

** COMMENT Git configuration

[[https://magit.vc/][Magit]] is a wonderful git interface for emacs.

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))

;; (use-package git-gutter-fringe
;;   :config
;;   (global-git-gutter-mode t))
#+end_src

** COMMENT Pdf viewer

Use [[https://github.com/politza/pdf-tools][pdf-tools]] instead of DocView:
#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width))
#+end_src

** COMMENT Configure Wiki

My personal notes are structured as a kind of a wiki, organized using [[https://jblevins.org/projects/deft/][Deft]] and exported using Org publishing capabilities.

#+begin_src emacs-lisp
(use-package deft
  :bind
  ("<f12>" . deft)
  ("C-x C-g" . deft-find-file)
  :config
  (setq deft-directory "~/.wiki")
  (setq deft-default-extension "org")
  (setq deft-extensions '("org"))
  (setq deft-recursive t)
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename nil)
  (setq deft-file-naming-rules '((noslash . "-")
				 (nospace . "-")
				 (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-ignore-file-regexp "\\(?:index.org\\|sitemap.org\\)$")
  (setq deft-recursive-ignore-dir-regexp "\\(?:\\.\\|\\.\\.\\|capture\\|include\\)$"))
#+end_src

** COMMENT Programming/markup languages

In this section I try to setup some support for programming/markup languages, much like what is done by [[http://spacemacs.org/][Spacemacs]] layers.

The first thing to enable is [[https://github.com/flycheck/flycheck][flycheck]]:

#+begin_src emacs-lisp
(use-package flycheck
  :config
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src

also, enable =rainbow-delimiters=:
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (show-paren-mode 1))
#+end_src

*** Ruby
**** Enable enhanced ruby mode

Enhanced Ruby Mode replaces the emacs ruby mode that comes with ruby.

#+begin_src emacs-lisp
(use-package enh-ruby-mode
  :config
  (add-to-list 'auto-mode-alist '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode)))
#+end_src

**** Enable inferior Ruby

#+begin_src emacs-lisp
(use-package inf-ruby
  :config
  (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
  (setq inf-ruby-default-implementation "pry"))
#+end_src

**** Enable Rubocop

#+begin_src emacs-lisp
(use-package rubocop
  :config
  (add-hook 'ruby-mode-hook 'rubocop-mode))
#+end_src

**** Enable Robe

#+begin_src emacs-lisp
(use-package robe
  :config
  (add-hook 'enh-ruby-mode-hook 'robe-mode))
#+end_src

*** COMMENT Haskell
**** Enable Haskell mode

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
(setq haskell-process-type 'stack-ghci)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode))
#+end_src

*** SageMath

[[https://github.com/sagemath/sage-shell-mode][This package]] enable to run [[http://www.sagemath.org/][SageMath]] within Emacs.

#+begin_src emacs-lisp
(use-package sage-shell-mode
  :config
  ;; Run SageMath by M-x run-sage instead of M-x sage-shell:run-sage
  (sage-shell:define-alias)

  ;; Turn on eldoc-mode in Sage terminal and in Sage source files
  (add-hook 'sage-shell-mode-hook #'eldoc-mode)
  (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode))
#+end_src

For integration with Babel, install [[https://github.com/stakemori/ob-sagemath][ob-sagemath]]:
#+begin_src emacs-lisp
(use-package ob-sagemath)
#+end_src

*** R

#+begin_src emacs-lisp
(use-package ess)
#+end_src

*** LaTeX

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-auto-save t)

  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-PDF-mode t) ;; pdf mode by default
  (setq reftex-plug-into-auctex t)
  (pdf-tools-install)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	TeX-source-correlate-start-server t)
  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
	    #'TeX-revert-document-buffer)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
(use-package cdlatex)
(use-package helm-bibtex)
#+end_src

*** Bash

#+begin_src emacs-lisp
(setq sh-basic-offset 2)
#+end_src

*** Org

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'init-org))
#+end_src

* COMMENT Org configuration
:properties:
:header-args+: :tangle "emacs/.elisp/init-org.el"
:end:

Org is so awesome it deserves a package itself:
#+begin_src emacs-lisp
;; package --- Summary
;;; configure org mode
;;; Commentary:
;; Configures org mode parameters

;;; Code:

<<org-conf>>

(message "configuring org-mode")
(provide 'init-org)
;;; init-org.el ends here
#+end_src

** General configuration
:properties:
:header-args+: :noweb-ref org-conf
:header-args+: :tangle no
:end:

*** Fix tag position

#+begin_src emacs-lisp
(setq org-tags-column 0)
#+end_src

*** Update timestamps

#+begin_src emacs-lisp
(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%Y-%m-%d %a %H:%M>" . "<%Y-%m-%d %a %H:%M>"))

;; Automatic update of time-stamps
(setq time-stamp-active t)
(setq time-stamp-format "<%:y-%02m-%02d %3a %02H:%02M>")
(setq time-stamp-pattern "10/^#\\+modified: %%$")
(add-hook 'before-save-hook 'time-stamp) ;; Update timestamp on saving
#+end_src

*** Clean view

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Startup with LaTeX previews

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
#+end_src

*** Startup with inline image previews

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

*** Folding symbol

#+begin_src emacs-lisp
(setq org-ellipsis " ï„‡ ") ;; folding symbol
#+end_src

*** Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (setq org-bullets-bullet-list '("âš«" "âš«" "âš«" "âš«"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))
#+end_src

*** Fix Org bullets when changing theme

Taken from [[https://www.reddit.com/r/emacs/comments/906bnj/after_switching_the_custom_theme_leading_stars/][here]].

#+begin_src emacs-lisp
(add-hook 'after-load-theme-hook
	  (lambda ()
	    (save-current-buffer
	      (mapc (lambda (b)
		      (set-buffer b)
		      (when (equal major-mode 'org-mode)
                  (progn
                    (font-lock-fontify-buffer)
                    (set-face-attribute 'org-hide nil :foreground (face-attribute 'default :background)))))
		    (buffer-list)))))
#+end_src

** LaTeX
:properties:
:header-args+: :noweb-ref org-conf
:header-args+: :tangle no
:end:

*** Quick insertion of LaTeX environment

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src

*** LaTeX code syntax highlighting

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native latex script entities))
#+end_src

*** Fix fragment preview size

Solution from [[https://ipfs-sec.stackexchange.cloudflare-ipfs.com/emacs/A/question/3387.html][here]]:

#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

(defun update-org-latex-fragments ()
  (org-latex-preview '(4)) ;; Clear all fragments in the buffer
  (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
    (plist-put org-format-latex-options :scale (* 2.3 text-scale-factor))
    ;; Print scale factor on *Messages* buffer
    (princ (plist-get org-format-latex-options :scale)))
  (org-latex-preview '(3))) ;; Display all fragments in the buffer

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'text-scale-mode-hook
		      'update-org-latex-fragments nil 'make-it-local)))
#+end_src

*** Fix fragment preview numbering

In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. However, each fragment is created in isolation, meaning that numbering is almost always wrong, and typically with each numbered equation starting with (1). [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][This hack]], stolen from John Kitchin, solves this in a nice way for my purposes.

#+begin_src emacs-lisp
(require 'cl-lib)
(require 'cl)
(defun org-renumber-environment (orig-func &rest args)
  "Improve equation numbering"
  (let ((results '())
        (counter -1)
        (numberp))
    (setq results (loop for (begin . env) in
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (lambda (env)
                            (cons
                             (org-element-property :begin env)
                             (org-element-property :value env))))
                        collect
                        (cond
                         ((and (string-match "\\\\begin{equation}" env)
                               (not (string-match "\\\\tag{" env)))
                          (incf counter)
                          (cons begin counter))
                         ((string-match "\\\\begin{align}" env)
                          (prog2
                              (incf counter)
                              (cons begin counter)
                            (with-temp-buffer
                              (insert env)
                              (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                              (incf counter (count-matches "\\\\$"))
                              ;; unless there are nonumbers.
                              (goto-char (point-min))
                              (decf counter (count-matches "\\nonumber")))))
                         (t
                          (cons begin nil)))))
    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))
  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)
#+end_src

*** Fix fragment color

This code changes the color of the fragment based on the current theme.

#+begin_src emacs-lisp
(defun vct-update-org-latex-fragment-colors ()
  (org-latex-preview '(4))
  (setq org-format-latex-options (plist-put org-format-latex-options :foreground 'auto))
  (setq org-format-latex-options (plist-put org-format-latex-options :background 'auto))
  (org-latex-preview '(3)))

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'after-load-theme-hook
		      'vct-update-org-latex-fragment-colors nil 'make-it-local)))
#+end_src

*** Automatic LaTeX fragment previewing toggle

This solution (found [[https://ivanaf.com/Automatic_Latex_Fragment_Toggling_in_org-mode.html][here]]) enables org-mode LaTeX preview images when the cursor is over the equation.
#+begin_src emacs-lisp
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun my/org-latex-fragment--get-current-latex-fragment ()
  "Return the overlay associated with the image under point."
  (car (--select (eq (overlay-get it 'org-overlay-type) 'org-latex-overlay) (overlays-at (point)))))

(defun my/org-in-latex-fragment-p ()
    "Return the point where the latex fragment begins, if inside
  a latex fragment. Else return false"
    (let* ((el (org-element-context))
           (el-type (car el)))
      (and (or (eq 'latex-fragment el-type) (eq 'latex-environment el-type))
          (org-element-property :begin el))))

(defun org-latex-fragment-toggle-auto ()
  ;; Wait for the s
  (interactive)
  (while-no-input
    (run-with-idle-timer 0.05 nil 'org-latex-fragment-toggle-helper)))

(defun org-latex-fragment-toggle-helper ()
    "Toggle a latex fragment image "
    (condition-case nil
        (and (eq 'org-mode major-mode)
             (let* ((begin (my/org-in-latex-fragment-p)))
               (cond
                ;; were on a fragment and now on a new fragment
                ((and
                  ;; fragment we were on
                  org-latex-fragment-last
                  ;; and are on a fragment now
                  begin
                  ;; but not on the last one this is a little tricky. as you edit the
                  ;; fragment, it is not equal to the last one. We use the begin
                  ;; property which is less likely to change for the comparison.
                  (not (= begin
                          org-latex-fragment-last)))
                 ;; go back to last one and put image back
                 (save-excursion
                   (goto-char org-latex-fragment-last)
                   (when (my/org-in-latex-fragment-p) (org-latex-preview))
                   ;; now remove current imagea
                   (goto-char begin)
                   (let ((ov (my/org-latex-fragment--get-current-latex-fragment)))
                     (when ov
                       (delete-overlay ov)))
                   ;; and save new fragment
                   (setq org-latex-fragment-last begin)))

                ;; were on a fragment and now are not on a fragment
                ((and
                  ;; not on a fragment now
                  (not begin)
                  ;; but we were on one
                  org-latex-fragment-last)
                 ;; put image back on
                 (save-excursion
                   (goto-char org-latex-fragment-last)
                   (when (my/org-in-latex-fragment-p)(org-latex-preview)))

                 ;; unset last fragment
                 (setq org-latex-fragment-last nil))

                ;; were not on a fragment, and now are
                ((and
                  ;; we were not one one
                  (not org-latex-fragment-last)
                  ;; but now we are
                  begin)
                 (save-excursion
                   (goto-char begin)
                   ;; remove image
                   (let ((ov (my/org-latex-fragment--get-current-latex-fragment)))
                     (when ov
                       (delete-overlay ov)))
                   (setq org-latex-fragment-last begin)))
                ;; else not on a fragment
                ((not begin)
                 (setq org-latex-fragment-last nil)))))
      (error nil)))

(add-hook 'post-command-hook 'org-latex-fragment-toggle-auto)
(setq org-latex-fragment-toggle-helper (byte-compile 'org-latex-fragment-toggle-helper))
(setq org-latex-fragment-toggle-auto (byte-compile 'org-latex-fragment-toggle-auto))
#+end_src

*** Citations

[[https://github.com/jkitchin/org-ref][org-ref]] is a set of org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools.

#+begin_src emacs-lisp
(use-package org-ref)
#+end_src

** Babel
:properties:
:header-args+: :noweb-ref org-conf
:header-args+: :tangle no
:end:

*** Preserve leading whitespace on export

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

*** Make TABS act natively on code blocks

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

*** Load languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
    '((shell . t)
      (R . t)
      (ruby . t)
      (C . t)
      (python . t)
      (fortran . t)
      (makefile . t)
      (sagemath . t)
      (haskell . t)
      (emacs-lisp . t)))
#+end_src

*** Do not ask for confirmation when executing code block

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

*** Default header arguments
**** All code blocks

#+begin_src R
(setq org-babel-default-header-args
      (cons '(:noweb . "yes")
            (assq-delete-all :noweb org-babel-default-header-args)))
#+end_src

**** R
#+begin_src emacs-lisp
(add-to-list 'org-babel-default-header-args:R '(:session . "*org-R*"))
#+end_src

**** SageMath

#+begin_src emacs-lisp
;; Ob-sagemath supports only evaluating with a session.
(setq org-babel-default-header-args:sage '((:noweb . "yes")
					   (:session . "org-sage")
                                           (:results . "output")))

;; C-c c for asynchronous evaluating (only for SageMath code blocks).
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))
#+end_src

**** Ruby

#+begin_src emacs-lisp
(setq org-babel-default-header-args:ruby '((:noweb . "yes")
                                           (:session . "org-ruby")
                                           (:results . "output")))
#+end_src

** Agenda
** Org agenda configuration

#+begin_src emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-agenda-files '("~/.wiki/capture/"))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))))))
        ("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))))

(setq org-archive-location "~/.wiki/capture/archive.org::")

;; TODO: Used to indicate tasks and projects which need to be done
;; STARTED: Used to indicate that a task or project is already started
;; WAITING: Whenever I have a task that is waiting on someone else, I'll assign it this keyword 
;; INACTIVE: signify that I'd like to come back to it eventually and I'll occasionally search my files for "INACTIVE" projects when I have time.
(setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|"  "WAITING(w)" "INACTIVE(l)" "CANCELED(c)" "DONE(d)")))

(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "GoldenRod" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold)) 
        ("INACTIVE" . (:foreground "LimeGreen" :weight bold))
        ("CANCELED" . (:foreground "LimeGreen" :weight bold))))

(setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
(setq org-outline-path-complete-in-steps nil) ; Refile in a single go
(setq org-refile-use-outline-path t)          ; Show full paths for refiling
#+end_src

* COMMENT Snippets
** Org
:properties:
:header-args+: :tangle-mode (identity #o666)
:header-args+: :tangle no
:end:

*** Emacs-lisp code block

#+begin_src text :tangle "emacs/.yasnippet/org-mode/elisp_src_block"
# -*- mode: snippet -*-
# name: elisp
# key: <el
# --
,#+begin_src emacs-lisp
$0
,#+end_src
#+end_src

* COMMENT Org LaTeX classes
** Preprint/notes

#+begin_src emacs-lisp :tangle "emacs/.elisp/org-latex-class-preprint.el"
;; package --- Summary
;;; Setup LaTeX class for preprints
;;; Commentary:
;; Configures org mode parameters

;;; Code:
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(setq org-latex-with-hyperref nil)

(setq org-latex-image-default-width ".4\\linewidth")

(setq org-latex-listings 'minted
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(add-to-list 'org-latex-classes
             '("preprint"
               "
\\pdfoutput=1 % To obtain pdf output rather than dvi when using `latex'
\\documentclass[10pt,a4paper]{article}
\\usepackage[margin=2cm]{geometry}
\\usepackage[]{babel} % Typographical rules for different languages
\\usepackage[utf8]{inputenc} % Translates from the chosen input encoding to LaTeX internal language
\\usepackage[T1]{fontenc} % Select font encoding
\\usepackage{ae,aecompl} % To solve fuzzy fonts on arXiv (https://arxiv.org/help/faq/texprobs)

\\usepackage{amsmath,amssymb,amsbsy,amsfonts,amsopn,amstext,amsthm} % AMS mathematical facilities

\\usepackage{graphicx} % Support for graphics
\\usepackage[dvipsnames]{xcolor} % Color extensions

\\usepackage{minted}
\\usemintedstyle{solarized-light}
%% \\mintedoptions

\\usepackage{mdframed}
\\surroundwithmdframed{minted}

%% Color choices from here:
%% https://tex.stackexchange.com/questions/100905/best-practice-for-hyperref-link-colours
\\newcommand\\vctshade{85}
\\colorlet{vctlinkcolor}{violet}
\\colorlet{vctcitecolor}{YellowOrange}
\\colorlet{vcturlcolor}{Aquamarine}

\\usepackage[%
  hyperindex,%
  breaklinks,%
  colorlinks = true,%
  linkcolor  = vctlinkcolor!\\vctshade!black,%
  citecolor  = vctcitecolor!\\vctshade!black,%
  urlcolor   = vcturlcolor!\\vctshade!black,%
]{hyperref} % Support for hypertext

\\usepackage[per-mode=symbol]{siunitx} % For using SI units
\\usepackage{float} % Improved interface for floating objects
\\usepackage{cancel} % To draw diagonal lines (\"cancel\" a term)

[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]
[EXTRA]
"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")))

(message "Loading Org LaTeX class preprint")
(provide 'org-latex-class-preprint)
#+end_src

