#+title: xterm configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o644)
#+property: header-args+ :noweb yes
#+property: header-args+ :tangle "xterm/.config/xterm/xterm_xresources"

[[https://en.wikipedia.org/wiki/Xterm][Xterm]] is the standard terminal emulator of the X Window System. It is highly configurable and has many useful features, although the defaults make it look like crap.

Its configuration is done by the X resources files. Some configuration is computer-dependent, and therefore any additional configuration can be done by the file =~/.Xresources_custom=, which is (manually) loaded during the initialization of X. For example, the font setting is done in this file:
#+begin_example conf
XTerm*faceName: xft:Monego
XTerm*faceSize: 15
#+end_example

* Set font sizes

#+begin_src conf
! VT Font Menu: Unreadable
xterm*faceSize1: 7
! VT font menu: Tiny
xterm*faceSize2: 10
! VT font menu: Medium
xterm*faceSize3: 13
! VT font menu: Large
xterm*faceSize4: 16
! VT font menu: Huge
xterm*faceSize5: 20
#+end_src

* Set locale

Force xterm to more strictly follow your locale:
#+begin_src conf
XTerm.vt100.locale: true
#+end_src

* Make every shell a login shell by default

This enables the inclusion of all environment variables

#+begin_src conf
XTerm*loginShell: true
#+end_src

* Enable TrueType fonts

#+begin_src conf
XTerm*renderFont: true
#+end_src

* Disable bold font simulation

#+begin_src conf
XTerm*boldMode: false
#+end_src

* Specifies the terminal type name

To be set in the =TERM= environment variable.

#+begin_src conf
XTerm.termName: xterm-256color
#+end_src

* Disable audio bell

I *HATE* the audio bell. I like the visual bell much more!
#+begin_src conf
XTerm*visualBell: true
#+end_src

* Key bindings
** Change fontsize

Since I'm constantly changing the font size, it's interesting to change the font size using the keyboard. I've got a nice solution [[https://blog.rot13.org/2010/03/change-font-size-in-xterm-using-keyboard.html][here]].
#+begin_src conf
XTerm.VT100.translations: #override \
      Super <Key> minus: smaller-vt-font() \n\
      Super <Key> plus: larger-vt-font() \n\
      Super <Key> KP_Subtract: smaller-vt-font() \n\
      Super <Key> KP_Add: larger-vt-font() \n
#+end_src

** Copy/Paste

I put some keybindings to copy/paste in the terminal in a way similar to konsole:
#+begin_src conf
XTerm*VT100.Translations: #override \
      Shift Ctrl<Key>V: insert-selection(CLIPBOARD) \n\
      Shift Ctrl<Key>V: insert-selection(PRIMARY) \n\
      Shift<Btn1Down>: select-start() \n\
      Shift<Btn1Motion>: select-extend() \n\
      Shift<Btn1Up>: select-end(CLIPBOARD)
XTerm*selectToClipboard: true
#+end_src

* Change colors

The default colors are worth changing too!
#+begin_src conf
XTerm*background:#232629
XTerm*foreground:#cfcfc2
#+end_src

* Make XTerm recognize escape sequence to change colors

#+begin_src conf
xterm*dynamicColors: true
#+end_src

* Make 'Alt' key behave as on other terminal emulators

The default =Alt= key behavior in xterm is a modifier to send eight bit input characters e.g. to insert =Ã¦= by pressing =Alt+f=. To make =Alt= instead send a =^[= (escape) key (as in gnome-terminal and konsole), set 

#+begin_src conf
XTerm*metaSendsEscape: true
#+end_src

* Text selection

#+begin_src conf
XTerm*highlightSelection: false
XTerm*trimSelection: true
#+end_src

* Cause the scrollbar to not go to the bottom of the scrolling region

#+begin_src conf
XTerm*scrollTtyOutput: false
#+end_src


