* Emacs configuration
:PROPERTIES:
:PADLINE: no
:END:

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an highly extensible and customizable text editor. It presents at its core an interpreter of a [[https://en.wikipedia.org/wiki/Lisp_programming_language][Lisp]] dialect called Emacs Lisp. GNU Emacs is one of the most powerful text editor available today.
** =.spacemacsrc=
[[http://spacemacs.org/][Spacemacs]] is a new way to experience GNU Emacs -- a sophisticated starter-kit focused on ergonomics, mnemonics and consistency.

This is the Spacemacs configuration file. it is loaded by Spacemacs at startup, and it must be stored in your =$HOME= directory.
*** Configuration layers
#+NAME: dotspacemacs-configuration-layers
#+BEGIN_SRC emacs-lisp
;; ----------------------------------------------------------------
;; Example of useful layers you may want to use right away.
;; Uncomment some layer names and press <SPC f e R> (Vim style) or
;; <M-m f e R> (Emacs style) to install them.
;; ----------------------------------------------------------------
helm
;; auto-completion
;; better-defaults
emacs-lisp
deft
;; git
latex
;; markdown
;; org
;; (shell :variables
;;        shell-default-height 30
;;        shell-default-position 'bottom)
;; spell-checking
;; syntax-checking
;; version-control
(mu4e :variables
  mu4e-installation-path "/usr/share/emacs/site-lisp")
#+END_SRC
*** Additional packages
#+NAME: dotspacemacs-additional-packages
#+BEGIN_SRC emacs-lisp
cdlatex
;org-ref
;ox-reveal
spaceline
deft
ov
#+END_SRC
*** General configuration
    This section contains configuration which is not related to any specific major mode.
**** User interface settings
***** Timestamp
Sometimes it's nice to have a timestamp in your files
#+NAME: timestamp
#+BEGIN_SRC emacs-lisp
(setq
  time-stamp-active t
  time-stamp-time-zone "UTC"
  time-stamp-format "%:y%02m%02d%02H%02M%02S"
  time-stamp-pattern "10/MODIFIED: %%$")
(add-hook 'before-save-hook 'time-stamp) ; update when saving
#+END_SRC
***** Abbreviations
Nice abbreviations for people like me who forget sometimes and keep pressing Shift key while typing.
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "W[rite]" 'save-buffer))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "Wq" 'evil-save-and-close))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "wQ" 'evil-save-and-close))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+END_SRC
***** Heartbeat cursor
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(use-package heartbeat-cursor :load-path "~/.elisp")
(heartbeat-cursor-mode)
#+END_SRC
***** Powerline 
The default old spacemacs modeline was moved to a separate project, [[https://github.com/TheBB/spaceline][spaceline]], and therefore you must include it separately:
#+NAME: powerline-configuration
#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-spacemacs-theme)
(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
(setq powerline-default-separator 'wave)
(spaceline-compile)
#+END_SRC
***** Visual line settings
****** Enable visual line mode 
We enable visual line mode for text-modes only:
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
****** Fringe indicators
Fringe indicators for visual line mode
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators
  '(left-curly-arrow right-curly-arrow))
#+END_SRC

****** Navigation
Fixing visual lines navigation: I got this solution [[https://github.com/syl20bnr/spacemacs/pull/1446][here]]. Make evil-mode up/down operate in screen lines instead of logical lines, both in normal state and visual mode.
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<up>" ) 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<up>" ) 'evil-previous-visual-line)
#+END_SRC
***** Google translate
Google translate configuration
#+NAME: google-translate
#+BEGIN_SRC emacs-lisp
(require 'google-translate)
(require 'google-translate-smooth-ui)

(setq google-translate-translation-directions-alist
  '(("pt" . "en") ("en" . "pt")))

;; Run google-translate query with SPC x g t
(spacemacs/set-leader-keys "xgt" 'google-translate-smooth-translate)
#+END_SRC

**** Copy/Paste in terminal
Enable clipboard in emacs
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(defun copy-to-clipboard ()
  "Copies selection to x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))))

(defun paste-from-clipboard ()
  "Pastes from x-clipboard."
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
(spacemacs/set-leader-keys "oy" 'copy-to-clipboard)
(spacemacs/set-leader-keys "op" 'paste-from-clipboard)
#+END_SRC
**** User-defined elisp folder
Add user elisp code to emacs' =PATH=
#+NAME: general-configuration
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.elisp/")
(let ((default-directory "~/.elisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC
*** Org-mode configuration
**** LaTeX Fragment preview folder location
#+NAME: org-latex-fragment-folder
#+BEGIN_SRC emacs-lisp
(setq org-latex-preview-ltximg-directory "/tmp")
#+END_SRC
**** Automatic LaTeX preview toggling
This solution uses John Kitchin code [[http://kitchingroup.cheme.cmu.edu/blog/2015/10/09/Automatic-latex-image-toggling-when-cursor-is-on-a-fragment/][here]], and takes advantage on the new behaviour of =org-toggle-latex-fragment=
#+NAME: org-latex-toggle-fragment
#+BEGIN_SRC emacs-lisp
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun org-latex-fragment-toggle ()
  "Toggle a latex fragment image "
  (and (eq 'org-mode major-mode)
       (let* ((el (org-element-context))
              (el-type (car el)))
         (cond
          ;;------------------------------------------------------------------------
          ;; were on a fragment and now on a new fragment
          ((and
            ;; fragment we were on
            org-latex-fragment-last
            ;; and are on a fragment now
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type))
            ;; but not on the last one this is a little tricky. as you edit the
            ;; fragment, it is not equal to the last one. We use the begin
            ;; property which is less likely to change for the comparison.
            (not (= (org-element-property :begin el)
                    (org-element-property :begin org-latex-fragment-last))))
           (message "You are on a fragment, and you were on another one")
           ;; Go back to the last one and toggle the preview
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-toggle-latex-fragment)
             (goto-char (org-element-property :begin el))
             (org-toggle-latex-fragment))
           ;; and save new fragment
           (setq org-latex-fragment-last el))
          ;;------------------------------------------------------------------------
          ;; were on a fragment and now are not on a fragment
          ((and
            ;; not on a fragment now
            (not (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
            ;; but we were on one
            org-latex-fragment-last)
           (message "You are not on a fragment, but you were on one") 
           ;; Go back to the last one and toggle the preview
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-toggle-latex-fragment))
           ;; unset last fragment
           (setq org-latex-fragment-last nil))
          ;;------------------------------------------------------------------------
          ;; were not on a fragment, and now are
          ((and
            ;; we were not one one
            (not org-latex-fragment-last)
            ;; but now we are
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type)))
           (message "You are on fragment, and you were not on a fragment before this")
           ;; Go back to the last one and toggle the preview
           (save-excursion
             (goto-char (org-element-property :begin el))
             (org-toggle-latex-fragment))
           (setq org-latex-fragment-last el))))))
(add-hook 'post-command-hook 'org-latex-fragment-toggle)

;; We also add a function to toggle preview state of all equations
(defun vct:toggle-preview-all-eqs ()
  (interactive)
  (org-preview-latex-fragment 16))
(define-key evil-normal-state-map (kbd "<f12>" ) 'vct:toggle-preview-all-eqs)
(define-key evil-insert-state-map (kbd "<f12>" ) 'vct:toggle-preview-all-eqs)
#+END_SRC
**** Fix LaTeX equation numbering
#+NAME: org-latex-equation-numbering
#+BEGIN_SRC emacs-lisp
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '()) 
        (counter -1)
        (numberp))

    (setq results (loop for (begin .  env) in 
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (lambda (env)
                            (cons
                             (org-element-property :begin env)
                             (org-element-property :value env))))
                        collect
                        (cond
                         ((and (string-match "\\\\begin{equation}" env)
                               (not (string-match "\\\\tag{" env)))
                          (incf counter)
                          (cons begin counter))
                         ((string-match "\\\\begin{align}" env)
                          (prog2
                              (incf counter)
                              (cons begin counter)                          
                            (with-temp-buffer
                              (insert env)
                              (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                              (incf counter (count-matches "\\\\$"))
                              ;; unless there are nonumbers.
                              (goto-char (point-min))
                              (decf counter (count-matches "\\nonumber")))))
                         (t
                          (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))
  
  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)
#+END_SRC
**** LaTeX fragment preview size
#+NAME: org-latex-fragment-preview-size
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.7))
#+END_SRC
**** LaTeX fragment tooltip
I got this nice snippet in the awesome John Kitchin's blog [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/06/Justifying-LaTeX-preview-fragments-in-org-mode/][here]].
#+NAME: org-latex-fragment-tooltip
#+BEGIN_SRC emacs-lisp
(tooltip-mode)
(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
               (concat (buffer-substring beg end) "\n"
                       "mouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                    (define-key map [mouse-1]
                                      `(lambda ()
                                         (interactive)
                                         (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                    map)))

;; advise the function to a
(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)
;; That is it. If you get tired of the advice, remove it like this:
;(advice-remove 'org--format-latex-make-overlay 'org-latex-fragment-tooltip)
#+END_SRC
**** LaTeX syntax highlighting

Unfortunately org-mode does not highlight LaTeX syntax nicely, so I have to handle by hand
#+NAME: org-latex-syntax-highlighting
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
  '(("\\(\\\\begin\\|\\\\end\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
     (1 'font-lock-keyword-face)
     (2 'font-lock-function-name-face))
    ("\\(\\\\eqref\\|\\\\ref\\|\\\\href\\|\\\\label\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
     (1 'font-lock-keyword-face)
     (2 'font-lock-constant-face))
    ("\\(\\\\textrm\\|\\\\frac\\|\\\\mathrm\\)"
     (1 'font-lock-keyword-face))
))
#+END_SRC
**** Insert LaTeX environments

Speedup insertion of LaTeX environments with [[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][CDLaTeX]]:
#+NAME: org-latex-cdlatex
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+END_SRC

#+NAME: org-latex-cdlatex
#+BEGIN_SRC emacs-lisp
(setq cdlatex-env-alist '(
    ("vct-eqn" "\\begin{equation}\n?\n\\end{equation}\n" nil)
    ("vct-alg" "\\begin{align}\n?\n\\end{align}\n" nil)
    ("vct-pmatrix" "\\begin{pmatrix}\n?\n\\end{pmatrix}\n" nil)
    ("vct-bmatrix" "\\begin{bmatrix}\n?\n\\end{bmatrix}\n" nil)))
(setq cdlatex-command-alist '(
    ("equation" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
    ("equat" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
    ("align" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
    ("alig" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
    ("pmatrix" "Insert pmatrix environment" "" cdlatex-environment ("vct-pmatrix") t nil)
    ("bmatrix" "Insert bmatrix environment" "" cdlatex-environment ("vct-bmatrix") t nil)))
#+END_SRC
**** PDF exporting
Uses latexmk for exporting
#+NAME: org-latex-export
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process '("latexmk -pdf %f"))
#+END_SRC
**** Toggle serif font
#+NAME: org-font-serif-toggle
#+BEGIN_SRC emacs-lisp
(defvar serif-preserve-default-list nil
  "A list holding the faces that preserve the default family and
  height when TOGGLE-SERIF is used.")
(setq serif-preserve-default-list
      '(;; LaTeX markup
        font-latex-math-face
        font-latex-sedate-face
        font-latex-warning-face
        ;; org markup
        org-latex-and-related
        org-meta-line
        org-verbatim
        org-block-begin-line
        ;; syntax highlighting using font-lock
        font-lock-builtin-face
        font-lock-comment-delimiter-face
        font-lock-comment-face
        font-lock-constant-face
        font-lock-doc-face
        font-lock-function-name-face
        font-lock-keyword-face
        font-lock-negation-char-face
        font-lock-preprocessor-face
        font-lock-regexp-grouping-backslash
        font-lock-regexp-grouping-construct
        font-lock-string-face
        font-lock-type-face
        font-lock-variable-name-face
        font-lock-warning-face))
        
(defun toggle-serif ()
  "Change the default face of the current buffer to use a serif family."
  (interactive)
  (when (display-graphic-p)  ;; this is only for graphical emacs
    ;; the serif font familiy and height, save the default attributes
    (let ((serif-fam "Times LT Std")
          (serif-height 120)
          (default-fam (face-attribute 'default :family))
          (default-height (face-attribute 'default :height)))
      (if (not (bound-and-true-p default-cookie))
          (progn (make-local-variable 'default-cookie)
                 (make-local-variable 'preserve-default-cookies-list)
                 (setq preserve-default-cookies-list nil)
                 ;; remap default face to serif
                 (setq default-cookie
                       (face-remap-add-relative
                        'default :family serif-fam :height serif-height))
                 ;; keep previously defined monospace fonts the same
                 (dolist (face serif-preserve-default-list)
                   (add-to-list 'preserve-default-cookies-list
                                (face-remap-add-relative
                                 face :family default-fam :height default-height)))
                 (message "Turned on serif writing font."))
        ;; undo changes
        (progn (face-remap-remove-relative default-cookie)
               (dolist (cookie preserve-default-cookies-list)
                 (face-remap-remove-relative cookie))
               (setq default-cookie nil)
               (setq preserve-default-cookies-list nil)
               (message "Restored default fonts."))))))

(define-key evil-normal-state-map (kbd "<f9>" ) 'toggle-serif)
(define-key evil-insert-state-map (kbd "<f9>" ) 'toggle-serif)
#+END_SRC
**** Structure  
#+NAME: org-mode-settings
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (require 'ox)
  (require 'ov)
  (require 'ox-latex)
  
  ;; Path to fragment previews
  <<org-latex-fragment-folder>>
  ;; Set preview size
  <<org-latex-fragment-preview-size>>
  ;; Automatic LaTeX image toggling when cursor is on a fragment
  <<org-latex-toggle-fragment>>
  ;; Fix LaTeX equation numbering
  <<org-latex-equation-numbering>>
  ;; Justify fragment previews
  <<org-latex-fragment-tooltip>>
  ;; LaTeX syntax highlighting
  <<org-latex-syntax-highlighting>>
  ;; CDLaTeX
  <<org-latex-cdlatex>>
  ;; PDF exporting
  <<org-latex-export>>
  ;; Toggle serif fonts
  <<org-font-serif-toggle>>)
 
#+END_SRC
*** Mu4e configuration
**** Maildir and folders
#+NAME: mu4e-maildir-and-folders
#+BEGIN_SRC emacs-lisp
(setq
  mu4e-maildir (expand-file-name "~/.maildir")
  mu4e-attachment-dir  "~/0.Inbox"
  mu4e-drafts-folder "/[Gmail].Drafts"
  mu4e-sent-folder   "/[Gmail].Sent Mail"
  mu4e-trash-folder  "/[Gmail].Trash")
#+END_SRC
**** HTML and preview settings
#+NAME: mu4e-html-and-preview
#+BEGIN_SRC emacs-lisp
(setq 
  mu4e-view-show-images t
  mu4e-image-max-width  800
  mu4e-html2text-command "w3m -dump -T text/html"
  mu4e-view-prefer-html t
  mu4e-headers-skip-duplicates t
  mu4e-get-mail-command "offlineimap -q"
  mu4e-update-interval 300)
#+END_SRC
**** Google contacts
#+NAME: mu4e-google-contacts
#+BEGIN_SRC emacs-lisp
(load-file "~/.elisp/helm-goobook.el")
#+END_SRC
**** Email signature
#+NAME: mu4e-compose-signature
#+BEGIN_SRC emacs-lisp
(setq
  mu4e-compose-signature
    (concat
      "Victor Santos\n"
      "Universidade Federal do Ceará\n"
      "victor_santos@fisica.ufc.br | vsantos@gravity.psu.edu\n"))
#+END_SRC
**** Misc settings
#+NAME: mu4e-misc-settings
#+BEGIN_SRC emacs-lisp
(setq
  mu4e-sent-messages-behavior 'delete
  message-kill-buffer-on-exit t
  mu4e-hide-index-messages t
  user-mail-address "victor_santos@fisica.ufc.br"
  user-full-name  "Victor Santos")
#+END_SRC
**** Sending e-mails
***** SMTP settings
#+NAME:  mu4e-sending-settings
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)
(require 'starttls)
(setq message-send-mail-function 'smtpmail-send-it
  smtpmail-stream-type 'starttls
  smtpmail-smtp-service 587
  smtpmail-default-smtp-server "smtp.gmail.com"
  smtpmail-smtp-server "smtp.gmail.com"
  smtpmail-smtp-user "victor.phb@gmail.com")
#+END_SRC
***** Compose window settings
#+NAME:  mu4e-sending-settings
#+BEGIN_SRC emacs-lisp
(defun vct:mail-compose-hooks ()
  "Settings for message composition."
  (flyspell-mode)
  (turn-off-auto-fill)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (visual-line-mode 1))

  (add-hook 'mu4e-compose-mode-hook 'vct:mail-compose-hooks)
  (add-hook 'message-mode-hook 'vct:mail-compose-hooks)
#+END_SRC
**** Structure  
#+NAME: mu4e-settings
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'mu4e
  ;; Google contacts
  <<mu4e-google-contacts>>
  ;; Set maildir and folders
  <<mu4e-maildir-and-folders>>
  ;; Preview configuration
  <<mu4e-html-and-preview>>
  ;; E-mail signature
  <<mu4e-compose-signature>>
  ;; Misc settings
  <<mu4e-misc-settings>>
  ;; SMTP settings
  <<mu4e-sending-settings>>)
#+END_SRC
*** Annotations configuration
**** Deft

[[jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by [[notational.net][Notational Velocity]]. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.

#+NAME: annotations-deft
#+BEGIN_SRC emacs-lisp
(require 'deft)

(setq deft-default-extension "org")
(setq deft-extensions '("org"))
(setq deft-directory "~/1.Working/Annotations")
(setq deft-recursive t)
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
#+END_SRC
**** Structure
#+NAME: annotations-settings
#+BEGIN_SRC emacs-lisp
<<annotations-deft>>
#+END_SRC

*** Source code structure
**** User configuration
#+NAME: dotspacemacs-user-config
#+BEGIN_SRC emacs-lisp 
<<general-configuration>>
<<org-mode-settings>>
<<mu4e-settings>>
<<annotations-settings>>
#+END_SRC
**** Configuration file
#+BEGIN_SRC emacs-lisp :noweb tangle :tangle emacs/spacemacsrc
;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     <<dotspacemacs-configuration-layers>>
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(
     <<dotspacemacs-additional-packages>>
   )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("FuraCode Nerd Font"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text t
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location nil
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
<<dotspacemacs-user-config>>
)

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
#+END_SRC
