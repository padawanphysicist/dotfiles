#+title: Doom Emacs configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes
#+PROPERTY: header-args+ :padline no

Configuration for [[https://github.com/hlissner/doom-emacs][Doom Emacs]].

* Private configuration
:properties:
:header-args+: :tangle "doom/.doom.d/config.el"
:header-args+: :shebang ";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-"
:end:

Place your private configuration within this file. You do not need to run 'doom sync' after modifying this file!

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to this file. Emacs searches the =load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

** Set theme

There are two ways to load a theme. Both assume the theme is installed and available. You can either set =doom-theme= or manually load a theme with the =load-theme= function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

** Set fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

- =doom-font=
- =doom-variable-pitch-font=
- =doom-big-font= used for =doom-big-font-mode=; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

** Set line numbering

This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Add my elisp directory and other files

Sometimes I load files outside the package system. As long as they're in a directory in my =load-path=, Emacs can find them.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.elisp")
#+end_src

** Keybinding for toggling line numbering

The default is no line numbers. One can then toggle with =<f9>=.

#+begin_src emacs-lisp
(defun vct/toggle-line-numbers ()
  (interactive)
  (display-line-numbers-mode 'toggle))
(global-set-key (kbd "<f9>") #'vct/toggle-line-numbers)
#+end_src

** Setup visual lines

Visual line mode actually does several things. From a user's point of view, it:
- Makes lines wrap at word boundaries. (controlled by var truncate-lines and word-wrap.)
- Makes up/down arrow keys move by a visual line. (controlled by the var line-move-visual.)
- Makes the kill-line command delete by a visual line, as opposed to a logical line.
- Turns off the display of little return arrow at the edge of window. (controlled by the var fringe-indicator-alist.)

Enable by default:
#+begin_src emacs-lisp
(global-visual-line-mode -1)
(global-set-key (kbd "<f8>") 'visual-line-mode)
#+end_src

and this code enable a visual hint whether a paragraph is hard or soften wrapped:
#+begin_src emacs-lisp
(defface my-custom-curly-face
  '((t (:foreground "orange")))
  "Face for fringe curly bitmaps."
  :group 'basic-faces)
(setq-default left-fringe-width 10)
(set-fringe-bitmap-face 'left-curly-arrow 'my-custom-curly-face)
(set-fringe-bitmap-face 'right-curly-arrow 'my-custom-curly-face)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src

** Set blinking cursor interval

#+begin_src emacs-lisp
(setq blink-cursor-interval 0.2)
(blink-cursor-mode 1)
#+end_src

** No suspending Emacs on =C-z= or =C-x C-z=

I really dislike this!
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-z"))
;;(global-unset-key (kbd "C-z"))
#+end_src

** Create a hook when theme changes

Taken from [[https://www.reddit.com/r/emacs/comments/4v7tcj/does_emacs_have_a_hook_for_when_the_theme_changes/][here]].

#+begin_src emacs-lisp
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

** Rest

#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")
#+end_src

** Org configuration
*** Set main folder (root directory)

Here I set all the main folders I use. All paths defined later should be relative to one of these variables:
#+begin_src emacs-lisp :noweb-ref set-org-directory
(setq org-directory (expand-file-name "~/Dropbox/zettelkasten/"))
;; (setq org-roam-directory (concat org-directory "notes/"))
#+end_src

*** Block invisible edits

#+begin_src emacs-lisp :noweb-ref block-invisible-edits
(setq org-catch-invisible-edits 'show-and-error)
#+end_src

*** Fix Org bullets when changing theme

Taken from [[https://www.reddit.com/r/emacs/comments/906bnj/after_switching_the_custom_theme_leading_stars/][here]]. For this to work, I've created a hook triggered by theme changes.

#+begin_src emacs-lisp :noweb-ref fix-org-bullets
(add-hook 'after-load-theme-hook
          (lambda ()
            (save-current-buffer
              (mapc (lambda (b)
                      (set-buffer b)
                      (when (equal major-mode 'org-mode)
                        (progn
                          (font-lock-fontify-buffer)
                          (set-face-attribute 'org-hide nil :foreground
                                              (face-attribute 'default :background)))))
                    (buffer-list)))))
#+end_src

*** Set folding symbol

#+begin_src emacs-lisp :noweb-ref set-folding-symbol
(setq org-ellipsis " ï„‡ ")
#+end_src

*** Update timestamps

#+begin_src emacs-lisp :noweb-ref update-timestamps
(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%Y-%m-%d %a %H:%M>" . "<%Y-%m-%d %a %H:%M>"))

;; Automatic update of time-stamps
(setq time-stamp-active t)
(setq time-stamp-format "<%:y-%02m-%02d %3a %02H:%02M>")
(setq time-stamp-pattern "10/^#\\+[mM][oO][dD][iI][fF][iI][eE][dD]: %%$")
(add-hook 'before-save-hook 'time-stamp) ;; Update timestamp on saving
#+end_src

*** Startup with inline image previews

#+begin_src emacs-lisp :noweb-ref start-with-image-preview
(setq org-startup-with-inline-images t)
#+end_src

*** LaTeX behaviour

**** Startup with LaTeX previews

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
#+end_src

**** Quick insertion of LaTeX environment

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src

**** LaTeX code syntax highlighting

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native latex script entities))
#+end_src

**** Previewing fragments
***** Configure org-fragtog

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

***** Fix fragment preview size

Solution from [[https://ipfs-sec.stackexchange.cloudflare-ipfs.com/emacs/A/question/3387.html][here]]:

#+begin_src emacs-lisp
(after! org
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))

(defun update-org-latex-fragments ()
  (org-latex-preview '(4)) ;; Clear all fragments in the buffer
  (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
    (plist-put org-format-latex-options :scale (* 2.3 text-scale-factor))
    ;; Print scale factor on *Messages* buffer
    (princ (plist-get org-format-latex-options :scale)))
  (org-latex-preview '(3))) ;; Display all fragments in the buffer

(add-hook 'org-mode-hook
  (lambda ()
    (add-hook 'text-scale-mode-hook
              'update-org-latex-fragments nil 'make-it-local)))
#+end_src

***** Fix fragment preview numbering

In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. However, each fragment is created in isolation, meaning that numbering is almost always wrong, and typically with each numbered equation starting with (1). [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][This hack]], stolen from John Kitchin, solves this in a nice way for my purposes.

#+begin_src emacs-lisp
(require 'cl-lib)
(require 'cl)
(defun org-renumber-environment (orig-func &rest args)
  "Improve equation numbering"
  (let ((results '())
        (counter -1)
        (numberp))
    (setq results (loop for (begin . env) in
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (lambda (env)
                            (cons
                             (org-element-property :begin env)
                             (org-element-property :value env))))
                        collect
                        (cond
                         ((and (string-match "\\\\begin{equation}" env)
			       (not (string-match "\\\\tag{" env)))
                          (incf counter)
                          (cons begin counter))
                         ((string-match "\\\\begin{align}" env)
                          (prog2
                              (incf counter)
                              (cons begin counter)
                            (with-temp-buffer
                              (insert env)
                              (goto-char (point-min))
                              ;; \\ is used for a new line. Each one leads to a number
                              (incf counter (count-matches "\\\\$"))
                              ;; unless there are nonumbers.
                              (goto-char (point-min))
                              (decf counter (count-matches "\\nonumber")))))
                         (t
                          (cons begin nil)))))
    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
            (concat
             (format "\\setcounter{equation}{%s}\n" numberp)
             (car args)))))
  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)
#+end_src

***** Fix fragment color

This code changes the color of the fragment based on the current theme.

#+begin_src emacs-lisp
(defun vct-update-org-latex-fragment-colors ()
  (org-latex-preview '(4))
  (setq org-format-latex-options (plist-put org-format-latex-options :foreground (face-attribute 'default :foreground)))
  (setq org-format-latex-options (plist-put org-format-latex-options :background (face-attribute 'default :background)))
  (org-latex-preview '(3)))

(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'after-load-theme-hook
		      'vct-update-org-latex-fragment-colors nil 'make-it-local)))
#+end_src


*** Babel configuration

**** Preserve leading whitespace on export

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

**** Make TABS act natively on code blocks

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

**** Do not ask for confirmation when executing code block

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

**** Fix R evaluation output

Remove weird ASCII characters from the output of evaluation block:

#+begin_src emacs-lisp
(defun org-babel-R-evaluate-session
    (session body result-type result-params column-names-p row-names-p)
  "Evaluate BODY in SESSION.
If RESULT-TYPE equals `output' then return standard output as a
string.  If RESULT-TYPE equals `value' then return the value of the
last statement in BODY, as elisp."
  (cl-case result-type
    (value
     (with-temp-buffer
       (insert (org-babel-chomp body))
       (let ((ess-local-process-name
              (process-name (get-buffer-process session)))
             (ess-eval-visibly-p nil))
         (ess-eval-buffer nil)))
     (let ((tmp-file (org-babel-temp-file "R-")))
       (org-babel-comint-eval-invisibly-and-wait-for-file
        session tmp-file
        (format org-babel-R-write-object-command
                (if row-names-p "TRUE" "FALSE")
                (if column-names-p
                    (if row-names-p "NA" "TRUE")
                  "FALSE")
                ".Last.value" (org-babel-process-file-name tmp-file 'noquote)))
       (org-babel-R-process-value-result
        (org-babel-result-cond result-params
          (with-temp-buffer
            (insert-file-contents tmp-file)
            (org-babel-chomp (buffer-string) "\n"))
          (org-babel-import-elisp-from-file tmp-file '(16)))
        column-names-p)))
    (output
     ;; strip ansi-color-control-seq-regexp from output!!
     (replace-regexp-in-string
      ansi-color-control-seq-regexp ""
      (mapconcat
       'org-babel-chomp
       (butlast
        (delq nil
              (mapcar
               (lambda (line) (when (> (length line) 0) line))
               (mapcar
                (lambda (line) ;; cleanup extra prompts left in output
                  (if (string-match
                       "^\\([>+.]\\([ ][>.+]\\)*[ ]\\)"
                       (car (split-string line "\n")))
                      (substring line (match-end 1))
                    line))
                (org-babel-comint-with-output (session org-babel-R-eoe-output)
                  (insert (mapconcat 'org-babel-chomp
                                     (list body org-babel-R-eoe-indicator)
                                     "\n"))
                  (inferior-ess-send-input)))))) "\n")))))
#+end_src

*** Zettelkasten

My personal notes are structured trying to follow as much as possible the concept of the famous "slip box" of [[https://pt.wikipedia.org/wiki/Niklas_Luhmann][Niklas Luhmann]], as described in the book
- [[https://www.amazon.com.br/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y][How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking â€“ for Students, Academics and Nonfiction Book Writers]]

The aim is to have notes created using org capture facilities, organized using [[https://jblevins.org/projects/deft/][Deft]] and exported using Org publishing capabilities.

**** Setup org-roam

#+begin_src emacs-lisp
(setq org-roam-directory (concat org-directory "notes/"))
(setq org-roam-tag-sources '(vanilla prop))
#+end_src

**** Setup deft

[[https://jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.

#+begin_src emacs-lisp
(setq deft-directory org-roam-directory)
(setq deft-recursive nil)
(setq deft-default-extension "org")
(setq deft-extensions '("org" "gpg" "md" "txt"))
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
#+end_src

**** Setup org-download

[[https://github.com/abo-abo/org-download][Org-download]] lets you screenshot and yank images from the web into your notes:

#+begin_src emacs-lisp
(setq org-download-image-dir (expand-file-name (concat org-roam-directory "img/")))
(setq org-download-screenshot-method "spectacle --background --region --output %s")
#+end_src

**** Configure templates

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      '(
	("d" "default" plain (function org-roam--capture-get-point)
	 "%?"
	 :file-name "%<%Y%m%d-%H%M%S>"
	 :head "#+title: ${title}\n#+date: %(org-insert-time-stamp (current-time) t)\n#+modified: \n#+filetags: :tag1:tag2:\n#+options: \n\n"
	 :unnarrowed t)))
#+end_src

**** Set fleeting notes location

Fleeting notes are the entry point for taking notes in a smart way. As the name says, they are supposed to be ephemeral, for dumping whatever it is in your head.

#+begin_src emacs-lisp
(setq org-default-notes-directory (expand-file-name (concat org-directory "/capture")))
(setq org-default-notes-file (concat org-default-notes-directory "/notebook.org"))
(setq org-agenda-files `(,org-default-notes-directory))
(setq org-archive-location (concat org-default-notes-directory "/archive.org::"))
#+end_src

**** Set templates for notes

#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-capture-templates
    '("t" "Tarefa"  entry
          (file org-default-notes-file)
          "* TODO %?\n%U" :empty-lines 1))
(add-to-list 'org-capture-templates
    '("n" "Nota"  entry
          (file org-default-notes-file)
          "* %? :note:\n%U" :empty-lines 1))
)

;; (add-to-list 'org-capture-templates
;; 	     '("s" "Agendado" entry (file+headline org-default-notes-file "Agenda")
;; 	       "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1))
;; (add-to-list 'org-capture-templates
;; 	     '("d" "Prazo" entry (file+headline org-default-notes-file "Agenda")
;; 	       "* TODO %? %^G \n  DEADLINE: %^t" :empty-lines 1))
;; (add-to-list 'org-capture-templates
;; 	     '("j" "DiÃ¡rio" entry (file+datetree journal-file)
;; 	       "* %? %^G\nEntered on %U\n"))
#+end_src

**** Create new blog post entry

#+begin_src emacs-lisp
(setq blog-post-directory (expand-file-name "~/2.working/padawanphysicist.gitlab.io/articles/"))

(after! org
  (add-to-list 'org-capture-templates
	     `("b" "Postagem blog" plain
	       (file ,(expand-file-name (concat blog-post-directory (format-time-string "%Y%m%d-%H%M%S.org"))))
	       ,(concat
		"#+title: %?\n"
		"#+date: " (format-time-string "<%Y-%m-%d %a %H:%M>\n")
		"#+modified: \n"
		"#+options: \n"
		"#+filetags: :unsorted: \n\n\n"
		"# TEASER_END") :empty-lines 1))
)
#+end_src

* =init.el=
:properties:
:header-args+: :tangle "doom/.doom.d/init.el"
:header-args+: :shebang ";;; init.el -*- lexical-binding: t; -*-"
:end:

This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!

NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's documentation. There you'll find a "Module Index" link where you'll find a comprehensive list of Doom's modules and what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press 'K' (or 'C-c c k' for non-vim users) to view its documentation. This works on flags as well (those symbols that start with a plus).

Alternatively, press 'gd' (or 'C-c c d') on a module to browse its directory (for easy access to its source code).

** Load modules

#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       (helm +fuzzy)       ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +switch-windows +numbers)     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex +latexmk +cdlatex +fold) ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam)              ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ruby
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

#+RESULTS:

** Respecting visual lines

#+begin_src emacs-lisp
(use-package-hook! evil
  :pre-init
  (setq evil-respect-visual-line-mode t)
  t)
#+end_src

** Decrease =which-key= popup delay

#+begin_src emacs-lisp
(after! which-key
  (setq which-key-idle-secondary-delay 0.1)
  (setq which-key-idle-delay 0.5))
#+end_src

* =packages.el=
:properties:
:header-args+: :tangle "doom/.doom.d/packages.el"
:header-args+: :shebang ";;; $DOOMDIR/packages.el -*- no-byte-comple: t; -*-"
:end:

To install a package with Doom you must declare them here and run 'doom sync' on the command line, then restart Emacs for the changes to take effect -- or use 'M-x doom/reload'.

** Automatic LaTeX fragment previewing toggle

#+begin_src emacs-lisp
(package! org-fragtog)
#+end_src

** Citations

[[https://github.com/jkitchin/org-ref][org-ref]] is a set of org-mode modules for citations, cross-references, bibliographies in org-mode and useful bibtex tools.

#+begin_src emacs-lisp
(package! org-ref)
#+end_src

** Rest
#+begin_src emacs-lisp
;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)


;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
