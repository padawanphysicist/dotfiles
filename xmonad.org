#+title: XMonad configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes
#+property: header-args+ :tangle "xmonad/.xmonad/xmonad.hs"

[[https://xmonad.org/][XMonad]] is a dynamically tiling window manager written and configured in [[https://www.haskell.org/][Haskell]]. It allows you to get things done by automating the aligning and positioning of the windows you open.

* Import libraries

Most of the libraries used here come from the package =xmonad-contrib=.

#+begin_src haskell
-- Base
import XMonad
import System.Exit (exitSuccess)
import System.Directory
import qualified XMonad.StackSet as W
import GHC.IO.Handle.Types

-- Config
import XMonad.Config.Desktop -- desktopConfig

-- Hooks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks -- Automatically manage dock type programs (panel, mainly)
import XMonad.Hooks.DynamicLog -- For panel
import XMonad.Hooks.WorkspaceHistory
import XMonad.Hooks.FadeInactive -- Add transparency to inactive windows
import XMonad.Hooks.UrgencyHook

-- Util
import XMonad.Util.SpawnOnce
import XMonad.Util.Run -- For spawn
import XMonad.Util.EZConfig -- For custom keys
import XMonad.Util.NamedActions

-- Actions
import qualified XMonad.Actions.TreeSelect as TS
import XMonad.Actions.CopyWindow (kill1, killAllOtherCopies)
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WithAll (sinkAll, killAll)
import XMonad.Actions.GroupNavigation

-- Layout
import XMonad.Layout.Spacing -- Add spacing (gaps) between windows
import XMonad.Layout.ToggleLayouts -- For toggling layouts
import XMonad.Layout.Grid -- For Grid layout
import XMonad.Layout.Renamed -- For renaming workspaces

-- Data
import qualified Data.Map as M
import Data.Char (isSpace, toUpper)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree

-- Prompt
import XMonad.Prompt
import XMonad.Prompt.Input
import XMonad.Prompt.FuzzyMatch
import XMonad.Prompt.Man
import XMonad.Prompt.Pass
import XMonad.Prompt.Shell
import XMonad.Prompt.Ssh
import XMonad.Prompt.XMonad
import Control.Arrow (first)

--import Graphics.X11.ExtraTypes.XF86 -- For Brightness keys
--import System.IO (hClose)
--import System.Posix.Process(executeFile)
#+end_src

* Change prefix key

=modMask= lets you specify which modkey you want to use. The default is =mod1Mask= ("left Alt"). You may also consider using =mod3Mask= ("right Alt"), which does not conflict with emacs keybindings. I prefer the "windows key", which is usually =mod4Mask=.

#+begin_src haskell
vctModMask :: KeyMask
vctModMask = mod4Mask
#+end_src

* Custom Variables

Here I set some values for things like font, terminal and editor. With this I only have to change the value here to make modifications globally.

** Application launcher

#+begin_src haskell
vctLauncher :: String
vctLauncher = "rofi -sidebar-mode -modi 'run,drun,ssh' -show 'run'"
#+end_src

** Terminal

I like to be able to use the same terminal environment no matter which workspace I'm using. Therefore I always keep my terminal connected to a tmux session named =vct=.

#+begin_src haskell
vctTerminal :: String
-- vctTerminal = "st -e tmux attach -t vct"
vctTerminal = "xterm"
#+end_src

** Screensaver

#+begin_src haskell
vctScreenSaver :: String
vctScreenSaver = "xscreensaver-command -lock"
#+end_src

** Editor

#+begin_src haskell
vctEditor :: String
vctEditor = "emacsclient --create-frame --alternate-editor=''"
#+end_src

** Web browser

#+begin_src haskell
vctWebBrowser :: String
vctWebBrowser = "firefox"
#+end_src

** Width of Windows border

Change this to a value > 0 to have border:
#+begin_src haskell
vctBorderWidth :: Dimension
vctBorderWidth = 4
#+end_src

** Colors

The usual behaviour of XMonad for highlight the focused (active) window is to draw a (usually red) border around it. You can change the color and width of the borders as follows:

#+begin_src haskell
vctFocusedBorderColor :: String
vctFocusedBorderColor = "#5294E2"

vctNormalBorderColor :: String
vctNormalBorderColor = "#282c34"
#+end_src

* Workspaces

This code enables the mouse to be used to switch workspaces. This requires [[https://www.semicomplete.com/projects/xdotool/][xdotool]] to be installed.
#+begin_src haskell
xmobarEscape :: String -> String
xmobarEscape = concatMap doubleLts
  where
        doubleLts '<' = "<<"
        doubleLts x   = [x]

myClickableWorkspaces :: [String]
myClickableWorkspaces = clickable . (map xmobarEscape)
                 $ ["1:WWW", "2:DEV", "3:READ", "4:AUX", "5:EXTRA"] ++ map show [6..9]
  where
        clickable l = [ "<action=xdotool key super+" ++ show (n) ++ ">" ++ ws ++ "</action>" |
                      (i,ws) <- zip [1..9] l,
                      let n = i ]
#+end_src

This variable keeps track of the number of windows within the workspace:
#+begin_src haskell
windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset
#+end_src

* Keybindings

#+begin_src haskell
vctKeys :: String -> [([Char], X ())]
vctKeys home =
  -- XMonad
  [ ("M-q", spawn "xmonad --restart") -- Recompiles XMonad
  , ("M-S-q", io exitSuccess)  -- Exits XMonad
  -- Programs
  , ("M-p", spawn vctLauncher)
  , ("M-a", spawn vctEditor)
  , ("M-z", sendMessage (Toggle "Full"))
  , ("M-S-z", spawn vctScreenSaver)
  -- Increase/decrease spacing (gaps)
  , ("M-d", decWindowSpacing 4)           -- Decrease window spacing
  , ("M-i", incWindowSpacing 4)           -- Increase window spacing
  , ("M-S-d", decScreenSpacing 4)         -- Decrease screen spacing
  , ("M-S-i", incScreenSpacing 4)         -- Increase screen spacing
  -- Kill windows
  , ("M-S-c", kill1)     -- Kill the currently focused client
  , ("M-S-a", killAll)   -- Kill all windows on current workspace
  -- Windows navigation
  , ("M-m", windows W.focusMaster)  -- Move focus to the master window
  , ("M-j", windows W.focusDown)    -- Move focus to the next window
  , ("M-k", windows W.focusUp)      -- Move focus to the prev window
  , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
  , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
  , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
  , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
  , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
  , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack
  , ("M1-<Tab>", spawn "rofi -modi window -show window")
  -- Tree Select
  --, ("C-M1-<Delete>", treeselectAction tsDefaultConfig)
  , ("C-M1-<Delete>", spawn "rofi -show powermenu -modi powermenu:rofi-power-menu")
  , ("M-S-<Space>", spawn "rofi -show kbd -modi kbd:rofi-switch-kbd-layout")
  ]
#+end_src

* Log Hooks

xmonad calls the =logHook= with every internal state update, which is useful for (among other things) outputting status information to an external status bar program such as xmobar or polybar.

** Transparency to inactive windows


However, there is a neater way to do this: make the unfocused (inactive) windows transparent. However, in order to do this, you must install a compositor, like Compton of xcompmgr. For now I'm sticking to [[https://github.com/chjj/compton][compton]], by eventually I'll try [[https://github.com/yshui/picom][picom]], which is a fork being activelly maintained.

#+begin_src haskell
vctTransparentInactive :: X()
vctTransparentInactive = fadeInactiveLogHook fadeAmount
    where fadeAmount = 0.7
#+end_src

** Pretty print to panel

#+begin_src haskell
vctPP :: Handle -> X()
vctPP h = dynamicLogWithPP xmobarPP
  { ppOutput = hPutStrLn h
  , ppCurrent = xmobarColor "#ffb90f" "" . wrap "[" "]" -- Current workspace in xmobar
  , ppTitle = (\str -> "")
  --, ppVisible = xmobarColor "#98be65" ""                -- Visible but not current workspace
  --, ppHidden = xmobarColor "#82AAFF" "" . wrap "*" ""   -- Hidden workspaces in xmobar
  --, ppHiddenNoWindows = xmobarColor "#c792ea" ""        -- Hidden workspaces (no windows)
  --, ppTitle = xmobarColor "#b3afc2" "" . shorten 60     -- Title of active window in xmobar
  , ppSep =  "<fc=#666666> <fn=2>|</fn> </fc>"          -- Separators in xmobar
  , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"  -- Urgent workspace
  , ppExtras  = [windowCount]                           -- # of windows current workspace
  -- , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
  }
#+end_src

** Combine hooks

#+begin_src haskell
vctLogHook :: Handle -> X()
vctLogHook h = vctTransparentInactive <+> (vctPP h) <+> historyHook
#+end_src

* Manage Hooks

Send applications to the right workspace

#+begin_src haskell
vctManageHook :: ManageHook
vctManageHook = composeAll
    [ manageDocks --, className =? "Firefox" --> doShift "1:WWW"
    ]
#+end_src

* Layouts
** Tall
The Tall layout has the master pane on the left, taking half of the screen. All other windows share the right half of the screen, and are stacked vertically, top to bottom.

This my the go-to layout, meant to be the first one that you get when running xmonad. It's common to have one window in focus while a couple secondary windows are in view, so the Tall layout works great. It's very useful in many situations, but the windows on the right start to feel a little crowded beyond five windows.

#+begin_src haskell
vctLayoutTall = Tall 1 (3/100) (7/10)
#+end_src

** Layout mirror

Mirrored version of =Tall=.

#+begin_src haskell
vctLayoutMirror = Mirror (Tall 1 (3/100) (3/5))
#+end_src

** Create hook

#+begin_src haskell
vctLayoutHook = renamed [CutWordsLeft 1] $ spacingRaw True (Border 0 10 10 10) True (Border 10 10 10 10) True $ toggleLayouts Full vctLayoutTall ||| vctLayoutMirror ||| Full
#+end_src

* Startup hook

These are commands we want XMonad to execute on startup or is restarted with =mod-q=.
#+begin_src haskell
vctStartupHook :: X()
vctStartupHook = do
  -- Set wallpaper
  spawnOnce "~/.fehbg &"
  -- Set cursor
  spawnOnce "xsetroot -cursor_name left_ptr &"
  -- Use caps as an additional Ctrl (useful for emacs)
  -- spawnOnce "setxkbmap -layout br -option -option altwin:meta_alt -option ctrl:nocaps &" -- ABNT2 Layout
  spawnOnce "setxkbmap us -variant intl &" -- ABNT2 Layout
  -- Compositing
  spawnOnce "picom --experimental-backend &"
  -- Notifications
  spawnOnce "dunst &"
  -- Start tmux in server mode
  spawnOnce "tmux new-session -d -s vct &"
  -- Start Emacs in server mode
  spawnOnce "emacs --daemon &"
  -- Start systemtray
  spawnOnce "stalonetray &"
  -- Start clipboard manager
  spawnOnce "klipper &"
  -- Start dropbox
  spawnOnce "dropbox start &"
  -- Start screensaver daemon
  spawnOnce "xscreensaver -no-splash &"
  -- Show notification in the end
  spawn "notify-send -i \"emblem-important-symbolic\" \"XMonad started\""
#+end_src

* Run XMonad

Now we run xmonad with all the settings we defined previously:
#+begin_src haskell
main :: IO()
main = do
  home <- getHomeDirectory
  xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc"
  xmonad
    $ withUrgencyHook NoUrgencyHook
    $ ewmh
    $ desktopConfig
    { modMask = vctModMask
    , terminal = vctTerminal
    , borderWidth        = vctBorderWidth
    , workspaces         = myClickableWorkspaces
    , normalBorderColor  = vctNormalBorderColor
    , focusedBorderColor = vctFocusedBorderColor
    , manageHook         = vctManageHook <+> manageHook desktopConfig
    , layoutHook         = avoidStruts $ vctLayoutHook
    , startupHook        = vctStartupHook
    , logHook = workspaceHistoryHook <+> (vctLogHook xmproc0)
    } `additionalKeysP` vctKeys home
#+end_src

* Xmobar configuration                                             :optional:
:properties:
:header-args+: :tangle "xmonad/.config/xmobar/xmobarrc"
:end:

You would like to install/enable [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] to see the colors here =)

#+begin_src haskell
-- http://projects.haskell.org/xmobar/
-- install xmobar with these flags: --flags="with_alsa" --flags="with_mpd" --flags="with_xft"  OR --flags="all_extensions"
-- you can find weather location codes here: http://weather.noaa.gov/index.html

Config { font    = "xft:Droid Sans Mono Slashed for Powerline:pixelsize=17:antialias=true:hinting=true"
       , additionalFonts = ["xft:Mononoki Nerd Font:pixelsize=18:antialias=true:hinting=true", "xft:Mononoki Nerd Font:pixelsize=20:antialias=true:hinting=true", "xft:Font Awesome 5 Free Regular:size=16", "xft:Font Awesome 5 Free Solid:size=16", "xft:Font Awesome 5 Brands Regular:size=16"] -- For the icons
       , bgColor = "#282c34"
       , fgColor = "#999999"
       -- , position = BottomW L 100
       , position = Static { xpos = 0, ypos = 1055, width = 1880, height = 25 }
       , lowerOnStart = True
       , hideOnStart = False
       , allDesktops = True
       , persistent = True
       , iconRoot = "/home/santos/.xmonad/xpm/"  -- default: "."
       , commands = [
                      -- Time and date
                      Run Date "<icon=calendar-clock-icon_20.xpm/> %b %d %Y - %H:%M" "date" 50
                    , Run Com "uptime" ["-p"] "" 36000
                      -- Network up and down
                    , Run Network "wlp2s0" ["-t", "<icon=net_up_20.xpm/> <rx>kb <icon=net_down_20.xpm/> <tx>kb"] 20
                      -- Cpu usage in percent
                    , Run MultiCpu       ["-w", "2" -- Fix width of the field
                                         , "-c", "0"-- Padding with zeros
                                         , "--template" , "<total0>% • <total1>% • <total2>% • <total3>%"
                                         , "--Low"      , "50"         -- units: %
                                         , "--High"     , "85"         -- units: %
                                         , "--low"      , "green"
                                         , "--normal"   , "orange"
                                         , "--high"     , "red"
                                         ] 10
                      -- Ram used number and percent
                    --, Run Memory ["-t", "RAM: <used>M (<usedratio>%)"] 20
                    , Run Memory ["-w", "2", "-c", "0", "-t", "<fc=#5294E2>RAM</fc>: <usedratio>%"] 10
                    , Run Swap ["-w", "2", "-c", "0", "-t", "<fc=#5294E2>SWAP</fc>: <usedratio>%"] 10
                      -- Disk space free
                    , Run DiskU [("/", "<fc=#5294E2>HD</fc>: <free> free")] [] 60
                      -- Runs a standard shell command 'uname -r' to get kernel version
                    , Run Com "uname" ["-r"] "" 3600
                      -- Prints out the left side items such as workspaces, layout, etc.
                      -- The workspaces are 'clickable' in my configs.
                    , Run UnsafeStdinReader
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = "<action=`xdotool key ctrl+alt+Delete`> <icon=haskell_20.xpm/> </action><fn=2>|</fn> %UnsafeStdinReader% <fn=2>|</fn> <icon=cpu_20.xpm/> %multicpu%<fn=2> | </fn>%uptime% <fn=2>|</fn> <icon=memory-icon_20.xpm/> %memory% • %swap%<fn=2> |</fn> <icon=harddisk-icon_20.xpm/> %disku%}{<fc=#98be65>%wlp2s0%</fc><fn=2>|</fn> %date% "
       }
#+end_src

* System tray :optional:
:properties:
:header-args+: :tangle "xmonad/.stalonetrayrc"
:end:

#+begin_src conf
decorations none
transparent false
dockapp_mode none
geometry 1x1-20+1055
background "#282c34"
kludges force_icons_size
grow_gravity NW
icon_gravity NW
icon_size 25
sticky true
#window_strut none
window_type dock
window_layer bottom
no_shrink false
skip_taskbar true
#+end_src
