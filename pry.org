#+title: Pry configuration
#+property: header-args  :tangle "pry/.pryrc"
#+property: header-args+ :mkdirp yes
#+property: header-args+ :shebang "#-*- mode: ruby -*-"
#+property: header-args+ :tangle-mode (identity #o444)

[[http://pryrepl.org/][Pry]] is a powerful alternative to the standard IRB shell for Ruby. It features syntax highlighting, a flexible plugin architecture, runtime invocation and source and documentation browsing.

* Load file within session

#+begin_src ruby
Pry::Commands.block_command "load", "Execute the code within file in the current session, leaving the resulting objects for inspecting" do |filename|
  Pry.toplevel_binding.eval File.read(filename)
end
#+end_src

* Stepping code

This enables short commands for stepping around while debugging. It makes use of [[https://github.com/deivid-rodriguez/byebug][byebug]] and [[https://github.com/deivid-rodriguez/pry-byebug][pry-byebug]] gems.

#+begin_src ruby
if defined?(PryByebug)
  Pry.commands.alias_command 'c', 'continue'
  Pry.commands.alias_command 's', 'step'
  Pry.commands.alias_command 'n', 'next'
  Pry.commands.alias_command 'f', 'finish'
end
#+end_src

* Repeat last command

Press =ENTER= will repeat the last command over again. Very convenient to step several lines of code.

#+begin_src ruby
Pry::Commands.command /^$/, "repeat last command" do
  _pry_.run_command Pry.history.to_a.last
end
#+end_src

* Quick fix for Org Babel

When using =:session= parameter together with =:results output=, Babel has a hardcoded line which assumes you are using irb. The piece of code concerns disabling echoing the return value of an expression, using =config.echo=. Since I'm not willing to modify the Babel code, it's easier to create this dummy class so Pry does not complain about Org code.

#+begin_src ruby
class Foo
  @echo = true
  @prompt_mode = :RVM
  attr_accessor :echo
  attr_accessor :prompt_mode
end

conf = Foo.new
#+end_src

