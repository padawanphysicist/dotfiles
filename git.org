#+title:  Git configuration
#+property: header-args  :tangle-mode (identity #o444)
#+property: header-args+ :tangle "git/.gitconfig"
#+property: header-args+ :mkdirp yes
#+property: header-args+ :noweb yes

[[https://git-scm.com/][Git]] is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git comes with a tool called =git config= that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:

1. =/etc/gitconfig= :: Contains values applied to every user on the system and all their repositories. If you pass the option =--system= to git config, it reads and writes from this file specifically. (Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.)
2. =~/.gitconfig= or =~/.config/git/config= :: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the --global option, and this affects all of the repositories you work with on your system.
3. =config= :: file in the Git directory (that is, =.git/config=) of whatever repository you’re currently using: Specific to that single repository. You can force Git to read from and write to this file with the --local option, but that is in fact the default. (Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.)

Therefore I will use =~/.config/git/config= as the configuration file.

* Identity

The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:

#+begin_src conf
[user]
  email = victor_santos@fisica.ufc.br
  name = Victor Santos (vct)
#+end_src

* Enable Colors in color-supporting terminals

#+begin_src conf
[color]
  ui = auto
#+end_src

* Aliases

Git doesn’t automatically infer your command if you type it in partially. If you don’t want to type the entire text of each of the Git commands, you can easily set up an alias.

#+begin_src conf :noweb yes
[alias]
  <<alias>>
#+end_src

** Logging

Commit history shown via the [[https://git-scm.com/docs/git-log][default =git log=]] is space-inefficient, and doesn’t really focus on the most important information. This colorful, graphical display is easier to parse, especially when branching gets complex.

#+begin_src conf :tangle no :noweb-ref alias
glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
#+end_src

** Undo

One of the best things in life is the capability to undo things!

#+begin_src conf :tangle no :noweb-ref alias
undo = reset HEAD~1 --mixed
#+end_src
