#+title: XMonad configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes
#+property: header-args+ :tangle "xmonad/.xmonad/xmonad.hs"

[[https://xmonad.org/][XMonad]] is a dynamically tiling window manager written and configured in [[https://www.haskell.org/][Haskell]]. It allows you to get things done by automating the aligning and positioning of the windows you open.

* Import libraries

Most of the libraries used here come from the package =xmonad-contrib=.

#+begin_src haskell
import XMonad -- For default configuration
import XMonad.Hooks.FadeInactive -- Add transparency to inactive windows
import XMonad.Util.EZConfig -- For custom keys
import Graphics.X11.ExtraTypes.XF86 -- For Brightness keys
import XMonad.Layout.Spacing -- Add spacing (gaps) between windows
import XMonad.Hooks.ManageDocks -- Automatically manage dock type programs (panel, mainly)
import XMonad.Hooks.DynamicLog -- For panel
import XMonad.Layout.Grid -- For Grid layout
import XMonad.Util.Run -- For spawn
import XMonad.Config.Desktop -- desktopConfig
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.UrgencyHook
import GHC.IO.Handle.Types
import XMonad.Layout.Renamed -- For renaming workspaces
import XMonad.Layout.ToggleLayouts -- For toggling layouts
#+end_src

* Change prefix key

=modMask= lets you specify which modkey you want to use. The default is =mod1Mask= ("left Alt"). You may also consider using =mod3Mask= ("right Alt"), which does not conflict with emacs keybindings. I prefer the "windows key", which is usually =mod4Mask=.

#+begin_src haskell
vctModMask :: KeyMask
vctModMask = mod4Mask
#+end_src

* Default applications
** Application launcher

#+begin_src haskell
vctLauncher :: String
vctLauncher = "rofi -sidebar-mode -modi 'run,drun,ssh' -show 'run'"
#+end_src

** Terminal

The long line here is to interchange foreground and background colors depending on the time of the day: light color during the day, dark color during the night.

#+begin_src haskell
vctTerminal :: String
vctTerminal = "xterm"
#+end_src

** Screensaver

#+begin_src haskell
vctScreenSaver :: String
vctScreenSaver = "xscreensaver-command -lock"
#+end_src

** Panel

#+begin_src haskell
vctPanel :: String
vctPanel = "xmobar"
#+end_src

** Editor

#+begin_src haskell
vctEditor :: String
vctEditor = "emacsclient --create-frame"
#+end_src

** Web browser

#+begin_src haskell
vctWebBrowser :: String
vctWebBrowser = "firefox"
#+end_src

* Workspaces

#+begin_src haskell
vctWorkspaces :: [String]
vctWorkspaces = ["1:WWW", "2:DEV", "3:READ", "4:AUX"] ++ map show [5..9]
#+end_src

* Keybindings

#+begin_src haskell
vctAdditionalKeys :: [((KeyMask, KeySym), X())]
vctAdditionalKeys = [ ((vctModMask, xK_p), spawn vctLauncher)
                    , ((0, xF86XK_MonBrightnessUp), spawn "sudo ~/.local/bin/xbacklight -i 10")
                    , ((vctModMask, xK_e), spawn vctEditor)
                    , ((vctModMask, xK_f), spawn vctWebBrowser)
                    , ((0, xF86XK_MonBrightnessDown), spawn "sudo ~/.local/bin/xbacklight -d 10")
                    , ((vctModMask .|. shiftMask, xK_z), spawn vctScreenSaver)
                    , ((vctModMask, xK_b), sendMessage ToggleStruts)
                    , ((vctModMask, xK_w), spawn "CM_LAUNCHER=rofi clipmenu")
                    , ((vctModMask, xK_z), sendMessage (Toggle "Full"))
                    ]
#+end_src

* Log Hooks

xmonad calls the =logHook= with every internal state update, which is useful for (among other things) outputting status information to an external status bar program such as xmobar or polybar.

** Transparency to inactive windows

The usual behaviour of XMonad for highlight the focused (active) window is to draw a (usually red) border around it. You can change the color and width of the borders as follows:

#+begin_src haskell
-- Width of windows border
vctBorderWidth :: Dimension
vctBorderWidth = 4 -- Change this to a value > 0 to have border

-- Border colors for focused/unfocused windows
vctFocusedBorderColor :: String
vctFocusedBorderColor = "#FFAA00"
vctNormalBorderColor :: String
vctNormalBorderColor  = "#CCCCCC"
#+end_src

However, there is a neater way to do this: make the unfocused (inactive) windows transparent. However, in order to do this, you must install a compositor, like Compton of xcompmgr. For now I'm sticking to [[https://github.com/chjj/compton][compton]], by eventually I'll try [[https://github.com/yshui/picom][picom]], which is a fork being activelly maintained.

#+begin_src haskell
vctTransparentInactive :: X()
vctTransparentInactive = fadeInactiveLogHook fadeAmount
    where fadeAmount = 0.65
#+end_src

** Pretty print to panel

#+begin_src haskell
vctPP :: Handle -> X()
vctPP h = dynamicLogWithPP xmobarPP 
  { ppOutput = hPutStrLn h
  , ppCurrent = xmobarColor "#ffb90f" "" . wrap "[" "]"
  , ppTitle = (\str -> "") 
  }
#+end_src

** Combine hooks

#+begin_src haskell
vctLogHook :: Handle -> X()
vctLogHook h = vctTransparentInactive <+> (vctPP h)
#+end_src

* Manage Hooks

Send applications to the right workspace

#+begin_src haskell
vctManageHook :: ManageHook
vctManageHook = composeAll
    [ manageDocks --, className =? "Firefox" --> doShift "1:WWW"
    ]
#+end_src

* Layouts
** Tall
The Tall layout has the master pane on the left, taking half of the screen. All other windows share the right half of the screen, and are stacked vertically, top to bottom.

This my the go-to layout, meant to be the first one that you get when running xmonad. It's common to have one window in focus while a couple secondary windows are in view, so the Tall layout works great. It's very useful in many situations, but the windows on the right start to feel a little crowded beyond five windows.

#+begin_src haskell
vctLayoutTall = Tall 1 (3/100) (1/2)
#+end_src

** Layout mirror

Mirrored version of =Tall=.

#+begin_src haskell
vctLayoutMirror = Mirror (Tall 1 (3/100) (3/5))
#+end_src

** Create hook

#+begin_src haskell
vctLayoutHook = renamed [CutWordsLeft 1] $ spacingRaw True (Border 0 10 10 10) True (Border 10 10 10 10) True $ toggleLayouts Full vctLayoutTall ||| vctLayoutMirror ||| Full
#+end_src

* Startup hook

Perform an arbitrary action each time xmonad starts or is restarted with =mod-q=. Used by, e.g., XMonad.Layout.PerWorkspace to initialize per-workspace layout choices.

#+begin_src haskell
vctStartupHook :: X()
vctStartupHook = do
  spawn "~/.autostart"
#+end_src

* Run XMonad

Now we run xmonad with all the settings we defined previously:
#+begin_src haskell
main :: IO()
main = do
  xmproc <- spawnPipe vctPanel -- spawnPipe returns a Handle
  xmonad $ withUrgencyHook NoUrgencyHook $ ewmh $ desktopConfig
    { modMask            = vctModMask
    , borderWidth        = vctBorderWidth
    , workspaces         = vctWorkspaces
    , terminal           = vctTerminal
    , normalBorderColor  = vctNormalBorderColor
    , focusedBorderColor = vctFocusedBorderColor
    , logHook            = vctLogHook xmproc
    , manageHook         = vctManageHook <+> manageHook desktopConfig
    , layoutHook         = avoidStruts $ vctLayoutHook
    , startupHook        = vctStartupHook
    } `additionalKeys` vctAdditionalKeys
#+end_src

* Xmobar configuration :optional:
:properties:
:header-args+: :tangle "xmonad/.xmobarrc"
:end:

You would like to install/enable [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] to see the colors here =)

#+begin_src haskell
-- You can take a look at
-- https://beginners-guide-to-xmonad.readthedocs.io/configure_xmobar.html
Config
  {
  -- appearance
    font = "xft:Inconsolata for Powerline:size=15:antialias=true"
  , additionalFonts = ["xft:Font Awesome 5 Free Regular:size=16", "xft:Font Awesome 5 Free Solid:size=16", "xft:Font Awesome 5 Brands Regular:size=16"] -- For the icons
  , allDesktops = True
  , position = BottomW L 100
--  , position = Static { xpos = 0, ypos = 0, width = 1890, height = 20 }
  , sepChar =  "@"   -- delineator between plugin names and straight text
  , alignSep = "}{"  -- separator between left-right alignment
  , template = "@UnsafeStdinReader@ | <fc=#4f94cd>CPU</fc> @multicpu@ | @memory@ • @swap@ | <fc=#caff70>@uptime@</fc> }{ <fc=#ffff00>[B]</fc> @backlight@% • <fc=#008b45>[BATT]</fc> @battery@ | @date@     "
  , commands =
    [
      Run UnsafeStdinReader
    -- , Run Cpu ["-L","3","-H","50","--normal","green","--high","red"] 10
    , Run MultiCpu       ["-w", "2" -- Fix width of the field
                         , "-c", "0"-- Padding with zeros
                         , "--template" , "<total0>% • <total1>% • <total2>% • <total3>%"
                         , "--Low"      , "50"         -- units: %
                         , "--High"     , "85"         -- units: %
                         , "--low"      , "green"
                         , "--normal"   , "orange"
                         , "--high"     , "red"
                         ] 10
    , Run Memory ["-w", "2", "-c", "0", "-t", "<fc=#4f94cd>RAM</fc>: <usedratio>%"] 10
    , Run Swap ["-w", "2", "-c", "0", "-t", "<fc=#4f94cd>SWAP</fc>: <usedratio>%"] 10
    , Run Com "uptime" ["-p"] "" 36000
    , Run Com "xbacklight" ["-g"] "backlight" 1
    , Run Date           "<fc=#ABABAB>%F (%a) %H:%M</fc>" "date" 10
    , Run Battery        [ "--template" , "<acstatus>"
                         , "--Low"      , "10"        -- units: %
                         , "--High"     , "80"        -- units: %
                         , "--low"      , "red"
                         , "--normal"   , "orange"
                         , "--high"     , "lightgreen"
                         , "--" -- battery specific options
                           -- discharging status
                         , "-o"         , "<left>% (<timeleft>)"
                           -- AC "on" status
                         , "-O"         , "<fc=#dAA520>Charging</fc>"
                           -- charged status
                         , "-i"         , "<fc=#006000>Charged</fc>"
                         ] 50
    ]
  }
#+end_src

* System tray :optional:
:properties:
:header-args+: :tangle "xmonad/.stalonetrayrc"
:end:

#+begin_src conf
decorations none
transparent false
dockapp_mode none
geometry 1x1-20+1060
background "#000000"
kludges force_icons_size
grow_gravity NW
icon_gravity NW
icon_size 20
sticky true
#window_strut none
window_type dock
window_layer bottom
no_shrink false
skip_taskbar true
#+end_src

* Autostart :optional:
:properties:
:header-args+: :tangle "xmonad/.autostart"
:header-args+: :tangle-mode (identity #o755)
:end:

#+begin_src bash
#!/usr/bin/env bash
#
# Autostart script. This is automatically generated by xmonad.org config.
# Please do not edit this file!
#
# This script should be run during the initialization of the
# window/desktop manager.
#
# You should be careful for using this in the startupHook of Xmonad,
# since it runs each time xmonad is restarted.
#

function run {
  PROGRAM_NAME=$1
  COMMAND=${PROGRAM_NAME}

  # Check if PROGRAM_NAME exists
  command -v "${PROGRAM_NAME}" 2>&1 > /dev/null
  if [[ "$?" == 0 ]]; then # PROGRAM_NAME exists
    if [ ! -z "$2" ]; then COMMAND=$2; fi
    pgrep --full "${PROGRAM_NAME}" 2>&1 > /dev/null
    if [[ "$?" == 1 ]]; then # $PROGRAM_NAME not running
      ${COMMAND} &
    fi
  fi
}

xsetroot -cursor_name left_ptr &

# Use caps as an additional esc (useful for VIM)
# setxkbmap -layout br -option -option altwin:meta_alt -option caps:escape &
# Use caps as an additional Ctrl (useful for emacs)
setxkbmap -layout br -option -option altwin:meta_alt -option ctrl:nocaps &

# Set wallpaper
[[ -f ~/.fehbg ]] && ~/.fehbg

run dunst
run stalonetray
run xscreensaver 'xscreensaver -no-splash'
run picom 'picom'
run dropbox '/home/santos/.local/bin/dropbox start'
notify-send 'Restarted!'

# Start emacs
pgrep -full emacs > /dev/null 
if [ "$?" -eq 1 ]; then 
  emacs --daemon &
fi

# Start tmux
tmux has-session -t santos 2>/dev/null
if [ "$?" -eq 1 ]; then 
  tmux new-session -t santos
fi
#+end_src
