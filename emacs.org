* Emacs configuration

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an highly extensible and customizable text editor. It presents at its core an interpreter of a [[https://en.wikipedia.org/wiki/Lisp_programming_language][Lisp]] dialect called Emacs Lisp. GNU Emacs is one of the most powerful text editor available today.

** =.spacemacs=
:PROPERTIES:
:TANGLE: emacs/spacemacsrc
:PADLINE: no
:MKDIRP: yes
:END:

[[http://spacemacs.org/][Spacemacs]] is a new way to experience GNU Emacs -- a sophisticated starter-kit focused on ergonomics, mnemonics and consistency.

This is the Spacemacs configuration file. it is loaded by Spacemacs at startup, and it must be stored in your =$HOME= directory.

*** Configuration Layers declaration

You should not put any user code in this function besides modifying the variable values.

**** Open =dotspacemacs/layers=

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  (setq-default
#+END_SRC

**** Base distribution

Base distribution to use. This is a layer contained in the directory `+distribution'. For now available distributions are `spacemacs-base' or `spacemacs'. (default 'spacemacs)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-distribution 'spacemacs-base
#+END_SRC

**** Set additional paths for configuration layers

List of additional paths where to look for configuration layers. Paths must have a trailing slash (i.e. `~/.mycontribs/')
#+BEGIN_SRC emacs-lisp
    dotspacemacs-configuration-layer-path '()
#+END_SRC

**** Load configuration layers

List of configuration layers to load. If it is the symbol `all' (dotspacemacs-configuration-layers all) instead of a list then all discovered layers will be installed.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-configuration-layers '(
      (auto-completion :variables
        auto-completion-enable-sort-by-usage t
        auto-completion-enable-help-tooltip t)
      (c-c++ :variables c-c++-default-mode-for-headers 'c++-mode)
      emacs-lisp
      html
      javascript
      (latex :variables latex-enable-auto-fill nil)
      python
      shell-scripts
      (colors :variables colors-enable-rainbow-identifiers t)
      git
      org
      search-engine
      (shell :variables
        shell-default-height 30
        shell-default-position 'bottom)
      (spell-checking :variables spell-checking-enable-by-default nil)
      syntax-checking
      version-control
      (mu4e :variables
        mu4e-installation-path "/usr/share/emacs/site-lisp")
      spotify
    )
#+END_SRC

**** Additional packages

List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages then consider to create a layer, you can also put the configuration in `dotspacemacs/config'.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-additional-packages '(
      jbeans-theme
      cdlatex
      org-ref
      vimish-fold
      ox-reveal
      spaceline
      ob-ipython
      google-translate
      visual-fill-column
      mustache
      pdf-tools
      pkgbuild-mode
    )
#+END_SRC

**** Excluded packages

A list of packages and/or extensions that will not be install and loaded.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-excluded-packages '(org-bullets)
#+END_SRC

**** Delete orphan packages

If non-nil spacemacs will delete any orphan packages, i.e. packages that are declared in a layer which is not a member of the list `dotspacemacs-configuration-layers'. (default t)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-delete-orphan-packages t
#+END_SRC

**** Close =dotspacemacs/layers=

Finally, we close the function =dotspacemacs/layers=:
#+BEGIN_SRC emacs-lisp
))
#+END_SRC

*** Initialization function

This function is called at the very startup of Spacemacs initialization before layers configuration. You should not put any user code in there besides modifying the variable values.

**** Open =dotspacemacs/init=

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/init ()
  (setq-default
#+END_SRC

**** Connect ELPA with https

If non nil ELPA repositories are contacted via HTTPS whenever it's possible. Set it to nil if you have no way to use HTTPS in your environment, otherwise it is strongly recommended to let it set to t. This variable has no effect if Emacs is launched with the parameter `--insecure' which forces the value of this variable to nil. (default t)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-elpa-https t
#+END_SRC

Maximum allowed time in seconds to contact an ELPA repository.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-elpa-timeout 5
#+END_SRC

**** Check for updates

If non nil then spacemacs will check for updates at startup when the current branch is not `develop'. (default t)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-check-for-update t
#+END_SRC

**** Editing style

One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid' uses emacs key bindings for vim's insert mode, but otherwise leaves evil unchanged. (default 'vim)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-editing-style 'vim
#+END_SRC

**** Output loading progress

If non nil output loading progress in `*Messages*' buffer. (default nil)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-verbose-loading nil
#+END_SRC

**** Startup banner

Specify the startup banner. Default value is `official', it displays the official spacemacs logo. An integer value is the index of text banner, `random' chooses a random text banner in `core/banners' directory. A string value must be a path to an image format supported by your Emacs build. If the value is nil then no banner is displayed. (default 'official)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-startup-banner 'official
#+END_SRC

List of items to show in the startup buffer. If nil it is disabled. Possible values are: `recents' `bookmarks' `projects'. (default '(recents projects))
#+BEGIN_SRC emacs-lisp
    dotspacemacs-startup-lists '(recents projects)
#+END_SRC

Number of recent files to show in the startup buffer. Ignored if `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-startup-recent-list-size 5
#+END_SRC

Default major mode of the scratch buffer (default `text-mode')
#+BEGIN_SRC emacs-lisp
    dotspacemacs-scratch-mode 'text-mode
#+END_SRC

**** Theme

List of themes, the first of the list is loaded when spacemacs starts. Press <SPC> T n to cycle to the next theme in the list (works great with 2 themes variants, one dark and one light)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-themes '(
      jbeans
      monokai
      spacemacs-dark
      spacemacs-light
      solarized-light
      solarized-dark
      leuven
      zenburn
    )
#+END_SRC

If non nil the cursor color matches the state color.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-colorize-cursor-according-to-state t
#+END_SRC

***** Font setting

Default font. `powerline-scale' allows to quickly tweak the mode-line size to make separators look not too crappy.

#+BEGIN_SRC emacs-lisp
    dotspacemacs-default-font '(
      "Source Code Pro"
      :size 15
      :weight normal
      :width normal
      :powerline-scale 1.2
    )
#+END_SRC

**** Leader key

The leader key

#+BEGIN_SRC emacs-lisp
    dotspacemacs-leader-key "SPC"
#+END_SRC

The leader key accessible in `emacs state' and `insert state' (default "M-m")
#+BEGIN_SRC emacs-lisp
    dotspacemacs-emacs-leader-key "M-m"
#+END_SRC

Major mode leader key is a shortcut key which is the equivalent of pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
#+BEGIN_SRC emacs-lisp
    dotspacemacs-major-mode-leader-key ","
#+END_SRC

Major mode leader key accessible in `emacs state' and `insert state'. (default "C-M-m)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-major-mode-emacs-leader-key "C-M-m"
#+END_SRC

These variables control whether separate commands are bound in the GUI to the key pairs C-i, TAB and C-m, RET. Setting it to a non-nil value, allows for separate commands under <C-i> and TAB or <C-m> and RET. In the terminal, these pairs are generally indistinguishable, so this only works in the GUI. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-distinguish-gui-tab nil
#+END_SRC

The command key used for Evil commands (ex-commands) and Emacs commands (M-x). By default the command key is `:' so ex-commands are executed like in Vim with `:' and Emacs commands are executed with `<leader> :'.
#+BEGIN_SRC emacs-lisp
    dotspacemacs-command-key ":"
#+END_SRC

If non nil `Y' is remapped to `y$'. (default t)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-remap-Y-to-y$ t
#+END_SRC

**** Layout

Name of the default layout (default "Default")

#+BEGIN_SRC emacs-lisp
    dotspacemacs-default-layout-name "Default"
#+END_SRC

If non nil the default layout name is displayed in the mode-line. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-display-default-layout nil
#+END_SRC

If non nil then the last auto saved layouts are resume automatically upon start. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-auto-resume-layouts nil
#+END_SRC

Location where to auto-save files. Possible values are `original' to auto-save the file in-place, `cache' to auto-save the file to another file stored in the cache directory and `nil' to disable auto-saving. (default 'cache)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-auto-save-file-location 'cache
#+END_SRC

Maximum number of rollback slots to keep in the cache. (default 5)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-max-rollback-slots 5
#+END_SRC

If non nil then `ido' replaces `helm' for some commands. For now only `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and `find-contrib-file' (SPC f e c) are replaced. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-use-ido nil
#+END_SRC

If non nil, `helm' will try to miminimize the space it uses. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-helm-resize nil
#+END_SRC

if non nil, the helm header is hidden when there is only one source. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-helm-no-header nil
#+END_SRC

define the position to display `helm', options are `bottom', `top', `left', or `right'. (default 'bottom)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-helm-position 'bottom
#+END_SRC

If non nil the paste micro-state is enabled. When enabled pressing `p` several times cycle between the kill ring content. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-enable-paste-micro-state nil
#+END_SRC

Which-key delay in seconds. The which-key buffer is the popup listing the commands bound to the current keystroke sequence. (default 0.4)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-which-key-delay 0.4
#+END_SRC

**** =which-key= position
Which-key frame position. Possible values are `right', `bottom' and `right-then-bottom'. right-then-bottom tries to display the frame to the right; if there is insufficient space it displays it at the bottom. (default 'bottom)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-which-key-position 'bottom
#+END_SRC

**** Progress bar

If non nil a progress bar is displayed when spacemacs is loading. This may increase the boot time on some systems and emacs builds, set it to nil to boost the loading time. (default t)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-loading-progress-bar nil
#+END_SRC

**** Fullscreen

If non nil the frame is fullscreen when Emacs starts up. (default nil) (Emacs 24.4+ only)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-fullscreen-at-startup nil
#+END_SRC

If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen. Use to disable fullscreen animations in OSX. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-fullscreen-use-non-native nil
#+END_SRC

If non nil the frame is maximized when Emacs starts up. Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil. (default nil) (Emacs 24.4+ only)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-maximized-at-startup nil
#+END_SRC

**** Transparency

A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's active or selected. Transparency can be toggled through `toggle-transparency'. (default 90)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-active-transparency 90
#+END_SRC

A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's inactive or deselected. Transparency can be toggled through `toggle-transparency'. (default 90)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-inactive-transparency 50
#+END_SRC

If non nil unicode symbols are displayed in the mode line. (default t)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-mode-line-unicode-symbols t
#+END_SRC

**** Smooth scrolling

If non nil smooth scrolling (native-scrolling) is enabled. Smooth scrolling overrides the default behavior of Emacs which recenters the point when it reaches the top or bottom of the screen. (default t)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-smooth-scrolling t
#+END_SRC

**** Line numbers

If non nil line numbers are turned on in all `prog-mode' and `text-mode' derivatives. If set to `relative', also turns on relative line numbers. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-line-numbers nil
#+END_SRC

**** Smart paren closing

If non-nil smartparens-strict-mode will be enabled in programming modes. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-smartparens-strict-mode nil
#+END_SRC

**** Highlight delimiters

Select a scope to highlight delimiters. Possible values are `any', `current', `all' or `nil'. Default is `all' (highlight any scope and emphasis the current one). (default 'all)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-highlight-delimiters 'all
#+END_SRC

**** Keep server open?

If non nil advises quit functions to keep server open when quitting. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-persistent-server nil
#+END_SRC

**** Executable names

List of search tool executable names. Spacemacs uses the first installed tool of the list. Supported tools are `ag', `pt', `ack' and `grep'. (default '("ag" "pt" "ack" "grep"))
#+BEGIN_SRC emacs-lisp
    dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
#+END_SRC

**** Default packages repository

The default package repository used if no explicit repository has been specified with an installed package. Not used for now. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-default-package-repository nil
#+END_SRC

**** Delete whitespaces

Delete whitespace while saving buffer. Possible values are `all' to aggressively delete empty line and long sequences of whitespace, `trailing' to delete only the whitespace at end of lines, `changed'to delete only whitespace for changed lines or `nil' to disable cleanup. (default nil)
#+BEGIN_SRC emacs-lisp
    dotspacemacs-whitespace-cleanup 'trailing
#+END_SRC

**** Closing =dotspacemacs/init=
#+BEGIN_SRC emacs-lisp
))
#+END_SRC

*** Initialization function for user code

Initialization function for user code. It is called immediately after `dotspacemacs/init'.  You are free to put any user code.

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-init ()
)
#+END_SRC

*** Configuration function for user code

Configuration function for user code. This function is called at the very end of Spacemacs initialization after layers configuration. You are free to put any user code.

**** Open =dotspacemacs/user-config=

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-config ()
#+END_SRC

**** Timestamp

Sometimes it's nice to have a timestamp in your files
#+BEGIN_SRC emacs-lisp
(require 's)
(setq
  time-stamp-active t
  time-stamp-time-zone "UTC"
  time-stamp-format (s-concat "%:y%02m%02d%02H%02M%02S" (format-time-string "%3N" (current-time) t))
  time-stamp-pattern "10/MODIFIED: %%$"
)
(add-hook 'before-save-hook 'time-stamp) ; update when saving
#+END_SRC

**** Folding

Configure vimish-fold to behave more-or-less like vim
#+BEGIN_SRC emacs-lisp
(vimish-fold-global-mode 1) ;; Enable everywhere
(define-key evil-visual-state-map "zf" 'vimish-fold)
(define-key evil-normal-state-map "za" 'vimish-fold-toggle)
(define-key evil-normal-state-map "zd" 'vimish-fold-delete)
(define-key evil-normal-state-map "zj" 'vimish-fold-next-fold)
(define-key evil-normal-state-map "zk" 'vimish-fold-previous-fold)
#+END_SRC

**** Search engine configuration

Configure search engine layer to use firefox
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      engine/browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+END_SRC

**** Spell check

Use aspell for spell check
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
#+END_SRC

**** User prefix

Change user-reserved prefix name
#+BEGIN_SRC emacs-lisp
  (spacemacs/declare-prefix "o" "user-defined-prefix")
#+END_SRC

**** Clipboard in terminal

Enable clipboard in emacs
#+BEGIN_SRC emacs-lisp
  (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!"))))

  (defun paste-from-clipboard ()
    "Pastes from x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )
  (spacemacs/set-leader-keys "oy" 'copy-to-clipboard)
  (spacemacs/set-leader-keys "op" 'paste-from-clipboard)
#+END_SRC

**** Powerline configuration

The default old spacemacs modeline was moved to a separate project, [[https://github.com/TheBB/spaceline][spaceline]], and therefore you must include it separately:
#+BEGIN_SRC emacs-lisp
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (setq powerline-default-separator 'wave)
  (spaceline-compile)
#+END_SRC

**** Custom elisp folder

Add user elisp code to emacs' =PATH=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.elisp/")
  (let ((default-directory "~/.elisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

**** Abbreviations

Nice abbreviations for people like me who forget sometimes and keep pressing Shift key while typing.
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "W[rite]" 'save-buffer))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "Wq" 'evil-save-and-close))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "wQ" 'evil-save-and-close))
  (eval-after-load 'evil-ex '(evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+END_SRC

**** Visual line navigation

Fixing visual lines navigation: I got this solution [[https://github.com/syl20bnr/spacemacs/pull/1446][here]]. Make evil-mode up/down operate in screen lines instead of logical lines, both in normal state and visual mode.
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<up>" ) 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<up>" ) 'evil-previous-visual-line)
#+END_SRC

**** Mode list configuration

Make org-mode work with files ending in .org
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+END_SRC

**** Fringe indicators

Fringe indicators for visual line mode
#+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators
    '(left-curly-arrow right-curly-arrow))
#+END_SRC

**** Document viewer

Activate pdf-tools
#+BEGIN_SRC emacs-lisp
  (pdf-tools-install)
#+END_SRC

**** Google translate

Google translate configuration
#+BEGIN_SRC emacs-lisp
(require 'google-translate)
(require 'google-translate-smooth-ui)

(setq google-translate-translation-directions-alist
  '(("pt" . "en") ("en" . "pt")))

;; Run google-translate query with SPC x g t
(spacemacs/set-leader-keys "xgt" 'google-translate-smooth-translate)
#+END_SRC

**** Enable local variables

Use this at your risk! I'm NOT conservative regarding local file variable, as I always know the code I'll be executing.
#+BEGIN_SRC emacs-lisp
    (setq enable-local-variables :all)
#+END_SRC

**** mu4e configuration

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'mu4e
  ;(load-file "~/.elisp/helm-goobook.el")

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
  (setq
    mu4e-maildir (expand-file-name "~/.maildir")
    mu4e-view-show-images t
    mu4e-image-max-width  800
    mu4e-html2text-command "w3m -dump -T text/html"
    mu4e-view-prefer-html t
    mu4e-headers-skip-duplicates t
    mu4e-get-mail-command "offlineimap -q"
    mu4e-update-interval 300
    mu4e-attachment-dir  "~/0.Inbox"
    mu4e-drafts-folder "/[Gmail].Drafts"
    mu4e-sent-folder   "/[Gmail].Sent Mail"
    mu4e-trash-folder  "/[Gmail].Trash"
    mu4e-sent-messages-behavior 'delete
    message-kill-buffer-on-exit t
    mu4e-hide-index-messages t
    user-mail-address "victor_santos@fisica.ufc.br"
    user-full-name  "Victor Santos"
    mu4e-compose-signature
     (concat
       "Victor Santos\n"
       "Universidade Federal do Ceará\n"
       "victor_santos@fisica.ufc.br | vsantos@gravity.psu.edu\n"
     )
  )

  ;; smtpmail
  (require 'smtpmail)
  (require 'starttls)
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-smtp-service 587
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-user "victor.phb@gmail.com")

  (defun vct:mail-compose-hooks ()
    "Settings for message composition."
    (flyspell-mode)
    (turn-off-auto-fill)
    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    (visual-line-mode 1))

  (add-hook 'mu4e-compose-mode-hook 'vct:mail-compose-hooks)
  (add-hook 'message-mode-hook 'vct:mail-compose-hooks)
)
#+END_SRC

**** Org-mode configuration

[[orgmode.org][Org-mode]] is an editing and organizing mode for notes, planning, and authoring in the free software text editor Emacs.

For toggling LaTeX previews
#+BEGIN_SRC emacs-lisp
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun org-latex-fragment-toggle ()
  "Toggle a latex fragment image "
  (and (eq 'org-mode major-mode)
       (let* ((el (org-element-context))
              (el-type (car el)))
         (cond
          ;; were on a fragment and now on a new fragment
          ((and
            ;; fragment we were on
            org-latex-fragment-last
            ;; and are on a fragment now
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type))
            ;; but not on the last one this is a little tricky. as you edit the
            ;; fragment, it is not equal to the last one. We use the begin
            ;; property which is less likely to change for the comparison.
            (not (= (org-element-property :begin el)
                    (org-element-property :begin org-latex-fragment-last))))
           ;; go back to last one and put image back
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; now remove current image
           (goto-char (org-element-property :begin el))
           (let ((ov (loop for ov in (org--list-latex-overlays)
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           ;; and save new fragment
           (setq org-latex-fragment-last el))

          ;; were on a fragment and now are not on a fragment
          ((and
            ;; not on a fragment now
            (not (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
            ;; but we were on one
            org-latex-fragment-last)
           ;; put image back on
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; unset last fragment
           (setq org-latex-fragment-last nil))

          ;; were not on a fragment, and now are
          ((and
            ;; we were not one one
            (not org-latex-fragment-last)
            ;; but now we are
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type)))
           (goto-char (org-element-property :begin el))
           ;; remove image
           (let ((ov (loop for ov in (org--list-latex-overlays)
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           (setq org-latex-fragment-last el))))))


(add-hook 'post-command-hook 'org-latex-fragment-toggle)
#+END_SRC

Open main (and only so far) task manager file.
#+BEGIN_SRC emacs-lisp
(defun open-organizer ()
  (interactive)
  "Open organizer/todo file."
  (find-file "~/1.Working/0.organizer.org"))
(spacemacs/set-leader-keys "aa" 'open-organizer)
#+END_SRC

Configuration to be done AFTER load org
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
#+END_SRC

[[https://github.com/joostkremers/visual-fill-column][Visual Fill Column]] is a minor mode which mimics the effect of fill-column in visual-line-mode: instead of wrapping lines at window edge, it wraps at fill-column
#+BEGIN_SRC emacs-lisp
  (require 'visual-fill-column)

  ;; Enable visual line mode
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Soft-wrap at column 80
  (setq visual-fill-column-width 80)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
#+END_SRC

<<cdlatex>>
Speedup insertion of LaTeX environments with [[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][CDLaTeX]]:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+END_SRC

Update all dynamic blocks before export
#+BEGIN_SRC emacs-lisp
(add-hook 'org-export-before-processing-hook
  (lambda (backend)
    (org-update-all-dblocks)))
#+END_SRC

Partial LaTeX syntax highlighting in org-mode buffers
#+BEGIN_SRC emacs-lisp
    (font-lock-add-keywords 'org-mode
      '(("\\(\\\\begin\\|\\\\end\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
         (1 'font-lock-keyword-face)
         (2 'font-lock-function-name-face))
        ("\\(\\\\eqref\\|\\\\ref\\|\\\\href\\|\\\\label\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
         (1 'font-lock-keyword-face)
         (2 'font-lock-constant-face))
        ("\\(\\\\textrm\\|\\\\frac\\)"
         (1 'font-lock-keyword-face))))
#+END_SRC

Syntax sugar for font formatting
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-emphasis-alist
        '("*" (:foreground "white" :weight bold)))

    (add-to-list 'org-emphasis-alist
        '("/" (:inherit italic :family "Monospace" :height 0.95)))

    ;; Hide markers
    (setq org-hide-emphasis-markers t)
#+END_SRC

Bigger LaTeX previews
#+BEGIN_SRC emacs-lisp
    (plist-put org-format-latex-options :scale 1.5)
#+END_SRC

org-ref configuration
#+BEGIN_SRC emacs-lisp
    (require 'org-ref)
    (setq org-ref-default-citation-link "eqref")
#+END_SRC

Limit the size of picture preview
#+BEGIN_SRC emacs-lisp
    (setq org-image-actual-width 300)
#+END_SRC

Set default font for tags
#+BEGIN_SRC emacs-lisp
    (custom-set-faces
      '(org-tag ((t (:foreground "DarkOrange3" :background "gray13" :box t)))))
#+END_SRC

Change ltxpng folder location for LaTeX previews
#+BEGIN_SRC emacs-lisp
    (setq org-latex-preview-ltxpng-directory "~/.ltxpng/")
#+END_SRC

CDLaTex configuration (it was loaded [[cdlatex][here]])
#+BEGIN_SRC emacs-lisp
    (setq cdlatex-env-alist
      '(
        ("vct-eqn" "\\begin{equation}\n?\n\\end{equation}\n" nil)
        ("vct-alg" "\\begin{align}\n?\n\\end{align}\n" nil)
       )
    )
    (setq cdlatex-command-alist
      '(
        ("equation" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
        ("equat" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
        ("align" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
        ("alig" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
       )
    )
#+END_SRC

This makes my life easier when typesetting tensors using abstract index notation
#+BEGIN_SRC emacs-lisp
    (setq cdlatex-math-symbol-alist '((?p ("\\phantom{?}"))))
#+END_SRC

Uses latexmk for exporting
#+BEGIN_SRC emacs-lisp
    (setq org-latex-pdf-process '("latexmk -pdf %f"))
#+END_SRC

LaTeX backend specific
#+BEGIN_SRC emacs-lisp
    (require 'ox-latex)

    (setq org-latex-prefer-user-labels t)

    ;; Remove headline title before export
    (defun ignored-headlines-removal (backend)
      (org-map-entries
        (lambda ()
          (delete-region (point)
            (progn (forward-line) (point)))) "ignore_heading"))
    (add-hook 'org-export-before-parsing-hook 'ignored-headlines-removal)
#+END_SRC

For site publishing
#+BEGIN_SRC emacs-lisp
    (require 'ox-publish)
#+END_SRC

For ignore_headline tag. Any headline tagged with 'ignore' will be ignored, while keeping its contents
#+BEGIN_SRC emacs-lisp
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))
#+END_SRC

Load programming languages
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages 'org-babel-load-languages '(
      (python . t)
      (C . t)
      (emacs-lisp . t)
      (gnuplot . t)
      (haskell . t)
      (shell . t)
    ))
#+END_SRC

Add support for IPython/Jupyter
#+BEGIN_SRC emacs-lisp
(require 'ob-ipython)
#+END_SRC

Configure org-capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/1.Working/0.notes.org")
#+END_SRC

Configure org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files "~/1.Working/0.organizer.org")
#+END_SRC



Closing =with-eval-after-load 'org=
#+BEGIN_SRC emacs-lisp
  )
#+END_SRC

**** LaTeX configuration

Normal font size in AUCTeX titles
#+BEGIN_SRC emacs-lisp
  (setq font-latex-fontify-sectioning 'color)
#+END_SRC

Closing =defun dotspacemacs/user-config=
#+BEGIN_SRC emacs-lisp
)
#+END_SRC
