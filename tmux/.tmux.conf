# Tmux configuration
#
# [[https://tmux.github.io/][tmux]] gives you terminal some superpowers. Enough
# said.

# Changing prefix
#
# The prefix is used to distinguish tmux commands from the commands sent to the
# programs inside of it. I was using =C-a= instead but note that this might
# interfere with bash’s "go to beginning of line" command1. So I've decide to
# follow emacs prefix, and changed the default prefix to =M-x=.
# We first release the default prefix,
unbind C-b
# and then define a new prefix:
set -g prefix C-z
bind-key C-z send-prefix

# Quickly reload tmux configuration
#
# When you are playing around with your tmux config you often need to
# repeatedly open =.tmux.conf= file and then source it into the current tmux
# session.
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded!"
#+end_src

# Sane splits
#
# I find quite difficult to remember the default pane splitting commands. Who's
# supposed to memorize ="= to split vertically and =%= to split horizontally? I
# find it helpful to have the characters as a more visual representation of the
# split, so I chose =|= and =-= for splitting panes vertically and horizontally
# respectively.

# Horizontal splits with =-=
unbind s
unbind ^S
unbind '"'
unbind -
bind - split-window -v -c "#{pane_current_path}"

# Vertical split with =\= or =/=
unbind v
unbind ^V
unbind %
unbind '\'
unbind /
bind '\' split-window -h -c "#{pane_current_path}"
bind / split-window -h -c "#{pane_current_path}"

# No delay for escape
# Mainly for vim+tmux:
set -s escape-time 0

# Set clipboard
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# Pane switching
#
# Switching between panes is a frequent task when using tmux. Therefore it
# should be as easy as possible. I’ don't like triggering the prefix key all
# the time. I want to be able to simply say =M-<direction>= to go where I want
# to go (remember: M is for Meta, which is usually your Alt key). With this
# modification I can simply press =Alt-left= to go to the left pane (and other
# directions respectively):
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# Mouse mode on by default
#
# While you can change panes and windows within tmux using the mouse, you can
# not copy directory with the mouse as usual. 
#
# To recover the usual mouse behaviour you must press and hold Shift. This
# makes Tmux pass control directly to the used terminal emulator, so when I
# want, I can copy&paste as if I am not using Tmux.
set -g mouse on

# Stop renaming windows automatically
#
# I like to give my tmux windows custom names using the =,= key. This helps me
# naming my windows according to the context they’re focusing on. By default
# tmux will update the window title automatically depending on the last
# executed command within that window. In order to prevent tmux from overriding
# my wisely chosen window names I want to suppress this behavior:
set-option -g allow-rename off

# Start window numbering at 1
#
# Start window indexing at one instead of zero. Then it will be more like the
# keyboard layout.
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when a window is closed
set -g renumber-windows on

# Slightly longer pane indicators display time
#
# Time given in milliseconds
set -g display-panes-time 2000

# Slightly longer status messages display time
set -g display-time 1000

# Boost history
#
# Set the maximum number of lines held in window history. This setting applies
# only to new windows - existing window histories are not resized and retain
# the limit at the point they were created.
set -g history-limit 20000

# Pass keys through to its terminals
#
# If this option is set, tmux will generate xterm-style function key sequences;
# these have a number included to indicate modifiers such as Shift, Alt or
# Ctrl.
set-window-option -g xterm-keys on

# Move to last active window
bind Tab last-window

# Set default terminal
set -g default-terminal xterm-256color

#
# Styling
#

# Border showing pane division
set -g pane-border-style 'fg=#666666'
set -g pane-active-border-style 'fg=#5294e2'

# Statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=#333333'

set -g status-left ''
set -g status-right '#[bg=#5294e2,fg=#dddddd] [#S] %d/%m/%Y '

setw -g window-status-style 'bg=#777777,fg=#000000'
setw -g window-status-format ' #I:#W#[fg=#ffff00]#F '
setw -g window-status-current-style 'bg=#5294e2,fg=#dddddd'
setw -g window-status-current-format ' #I:#W#[fg=#333333,bg=##ffd700]#F '
