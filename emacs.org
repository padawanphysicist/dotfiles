#+title: Emacs configuration
#+property: header-args  :mkdirp yes
#+property: header-args+ :tangle-mode (identity #o444)
#+property: header-args+ :noweb yes
#+PROPERTY: header-args+ :padline no

[[https://www.gnu.org/software/emacs/][GNU Emacs]] is an extensible, customizable, [[https://www.gnu.org/philosophy/free-sw.html][free/libre]] text editor. It is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.

Why lexical scope? https://nullprogram.com/blog/2016/12/22/

This section contains the configuration to be used for pure Emacs (no starter kits).

* Early init file
  :properties:
  :header-args+: :tangle "emacs/.emacs.d/early-init.el"
  :header-args+: :shebang ";; -*- mode: emacs-lisp; lexical-binding: t; -*-"
  :end:

Emacs 27+ introduces =early-init.el=, which is run before =init.el=, before package and UI initialization happens. Therefore we can customize in it variables that affect frame appearance as well as the package initialization process.


** Improve garbage collection

The [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][garbage collection]] in Emacs is very simple. You allocate some bytes and once you pass a certain threshold, it garbage collects.

It turns out that the default behavior is to garbage collect very often. And because there is so little garbage to collect each time, you will not notice any lag. The problem is when you use memory-intensive features like =helm= on a large collection. The solution is mentioned in the manual:

#+begin_example
The initial threshold value is GC_DEFAULT_THRESHOLD, defined in alloc.c. Since it's defined in word_size units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one. If you specify a larger value, garbage collection will happen less often. This reduces the amount of time spent garbage collecting, but increases total memory use. You may want to do this when running a program that creates lots of Lisp data. 
#+end_example

*** Defer garbage collection further back in the startup process

The Garbage Collector eats up quite a bit of time, easily doubling startup time. The trick is to turn up the memory threshold as early as possible. This helps reduce initialization time.

#+begin_src emacs-lisp
(customize-set-variable 'gc-cons-threshold most-positive-fixnum)
(customize-set-variable 'gc-cons-percentage 0.6)
#+end_src

*** Set =gc-cons-threshold= smaller for interactive use

I first define a new threshold for triggering the collector:
#+begin_src emacs-lisp
(defvar startup/gc-cons-threshold 67108864 ; 64mb
  "The default value to use for `gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering, increase this.")
#+end_src

We also define a function to be hooked in the startup:
#+begin_src emacs-lisp
(defun startup/reset-gc ()
  (setq gc-cons-threshold startup/gc-cons-threshold
        gc-cons-percentage 0.1))
#+end_src

*** Avoid Garbage Collect When Using Minibuffer

#+begin_src emacs-lisp
(defun gc-minibuffer-setup-hook ()
  (setq gc-cons-threshold (* startup/gc-cons-threshold 2)))

(defun gc-minibuffer-exit-hook ()
  (garbage-collect)
  (setq gc-cons-threshold startup/gc-cons-threshold))
#+end_src

Therefore, while the minibuffer is open, garbage collection will never occur, but once we make a selection, or cancel, garbage collection will kick off immediately and then revert back to the default, sensible behavior. This should fix any random freezing within Emacs.

** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it wonâ€™t need any of them.

Since the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html][manual]] says that the main use case for this is for accessing remote file (which I never need), I can safely disable it.

#+begin_src emacs-lisp
(defvar startup/file-name-handler-alist file-name-handler-alist 
  "Original alist of elements (REGEXP . HANDLER) for file names handled specially (magic files).")
(setq file-name-handler-alist nil)
#+end_src

#+begin_src emacs-lisp
(defun startup/revert-file-name-handler-alist ()
  (setq file-name-handler-alist startup/file-name-handler-alist))
#+end_src

** Disable =site-run-file=

Since I'm not using a multi-user environment, I can disable it.

#+begin_src emacs-lisp
(setq site-run-file nil)
#+end_src

** Remove the splash startup screen

#+begin_src emacs-lisp
(customize-set-variable 'inhibit-splash-screen t)
#+end_src

** Remove the menu bar

You can always use =F10= to open the menu.

#+begin_src emacs-lisp
(customize-set-variable 'menu-bar-mode nil)
#+end_src

** Remove the tool bar

#+begin_src emacs-lisp
(customize-set-variable 'tool-bar-mode nil)
#+end_src

** Remove the scroll bar

#+begin_src emacs-lisp
(customize-set-variable 'scroll-bar-mode nil)
#+end_src

** Do not activate installed packages when Emacs starts

#+begin_src emacs-lisp
(customize-set-variable 'package-enable-at-startup nil)
#+end_src

** Load custom configuration

Emacs =custom= facility puts some "cryptic" entries into the =custom-set-variables= and =custom-set-faces= in the end of =init.el= file, which I have under version control. This causes a lot of conflicts when I update configuration across different machines.

This code offloads the =custom-set-variables= to a separate file. This keeps your =init.el= neater and you have the option to gitignore your =custom.el= if you see fit.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

;; Load custom file. Don't hide errors. Hide success message
(if (file-exists-p custom-file)
  (load custom-file nil t))
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

** Startup hooks

This hook runs after loading init files and handling the command line.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
(add-hook 'emacs-startup-hook 'startup/reset-gc)
(add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)
;;  Garbage Collect When Emacs is Out of Focus
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))))
#+end_src



